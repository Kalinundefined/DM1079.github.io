<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>好きだよ！</title>
  
  <subtitle>Alin&#39;s Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.sukidayo.top/"/>
  <updated>2021-09-13T03:56:58.878Z</updated>
  <id>http://www.sukidayo.top/</id>
  
  <author>
    <name>Alin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>GAMES101笔记</title>
    <link href="http://www.sukidayo.top/2021/09/13/GAMES101/"/>
    <id>http://www.sukidayo.top/2021/09/13/GAMES101/</id>
    <published>2021-09-13T03:51:43.137Z</published>
    <updated>2021-09-13T03:56:58.878Z</updated>
    
    <content type="html"><![CDATA[<p>GAMES101的笔记</p><span id="more"></span><h1 id="GAMES101-现代计算机图形学入门"><a href="#GAMES101-现代计算机图形学入门" class="headerlink" title="GAMES101: 现代计算机图形学入门"></a>GAMES101: 现代计算机图形学入门</h1><h2 id="Lecture-1-Overview-of-Computer-Graphics"><a href="#Lecture-1-Overview-of-Computer-Graphics" class="headerlink" title="Lecture 1 Overview of Computer Graphics"></a>Lecture 1 Overview of Computer Graphics</h2><h3 id="什么是图形学"><a href="#什么是图形学" class="headerlink" title="什么是图形学"></a>什么是图形学</h3><p>使用计算机去合成和操作视觉信息。</p><h3 id="图形学的应用"><a href="#图形学的应用" class="headerlink" title="图形学的应用"></a>图形学的应用</h3><ul><li><p>Video Games</p><ul><li>只狼、无主之地3</li><li>渲染中的关键技术：全局光照，技术角度上，全局光照越亮，技术水平一般越好；</li></ul></li><li><p>Movies</p><ul><li>黑客帝国：Special Effects，特效生活中越罕见，越容易实现；</li><li>阿凡达：面部和动作捕捉；</li></ul></li><li><p>Animations</p><ul><li>疯狂动物城：毛发模拟；</li><li>冰雪奇缘：烟雾、粒子特效；模拟动画；毛发和布料模拟；</li></ul></li><li><p>Design</p><ul><li>CAD、CG：宜家、Autodesk</li></ul></li><li><p>Visualization</p><ul><li>Science、engineering、medicine、journalism、etc.</li></ul></li><li>Virtual Reality</li><li>Digital Illustration<ul><li>Adobe Photoshop</li></ul></li><li>Simulation</li><li>Graphical User Interfaces(GUI)</li><li>Typography/Fonts bitmap or vector</li></ul><h3 id="为什么学习图形学"><a href="#为什么学习图形学" class="headerlink" title="为什么学习图形学"></a>为什么学习图形学</h3><p>Computer Graphics is AWESOME.</p><h3 id="课程大纲"><a href="#课程大纲" class="headerlink" title="课程大纲"></a>课程大纲</h3><ul><li><p>光栅化</p><p>​    定义：把三维空间的几何形体显示在屏幕上。</p><p>​    计算机图形学分为实时的(30 Frame per Second+)和离线的。</p></li><li><p>曲线和曲面</p><p>​    定义：如何用图形学表示曲线和曲面。</p></li><li><p>光线追踪</p><p>​    动画和电影中的离线应用。也有实时光线追踪。</p></li><li><p>动画和模拟</p><p>​    关键帧动画、质量-弹簧系统。</p></li></ul><p>课程<strong>不会</strong>包括：</p><ul><li><p>使用OpenGL、DirectX、Vulcan</p></li><li><p>Shader语法</p><p>​    Learn Graphics, not Graphics APIs</p></li><li><p>三维建模/游戏开发（Maya/3DS MAX/Blender/Unity/Unreal Engine）</p></li><li><p>Computer Vision/Deep Learning</p><h2 id="Lecture-2-Linear-Algebra"><a href="#Lecture-2-Linear-Algebra" class="headerlink" title="Lecture 2 Linear Algebra"></a>Lecture 2 Linear Algebra</h2></li></ul><p>基础线性代数复习</p><h2 id="Lecture-3-Transformation"><a href="#Lecture-3-Transformation" class="headerlink" title="Lecture 3 Transformation"></a>Lecture 3 Transformation</h2><h3 id="为什么要学习变换"><a href="#为什么要学习变换" class="headerlink" title="为什么要学习变换"></a>为什么要学习变换</h3><ul><li>模型变换（modeling）</li><li>视图变换（viewing）</li></ul><p>动画、视角变化、投影</p><h3 id="二维空间变换：旋转、缩放、切片"><a href="#二维空间变换：旋转、缩放、切片" class="headerlink" title="二维空间变换：旋转、缩放、切片"></a>二维空间变换：旋转、缩放、切片</h3><h4 id="线性变换：使用矩阵表示变换"><a href="#线性变换：使用矩阵表示变换" class="headerlink" title="线性变换：使用矩阵表示变换"></a>线性变换：使用矩阵表示变换</h4><p>可以写为</p><script type="math/tex; mode=display">\bold{x'}=\bold{Mx}</script><p>的变换称为<strong>线性变换</strong>。</p><h5 id="缩放变换-Scale"><a href="#缩放变换-Scale" class="headerlink" title="缩放变换(Scale)"></a>缩放变换(Scale)</h5><p>$S_{(s_x,s_y)}$​</p><script type="math/tex; mode=display">\left(\begin{matrix}x'\\y'\end{matrix}\right)=\left(\begin{matrix}s_x & 0 \\0 & s_y\end{matrix}\right)\left(\begin{matrix}x\\y\end{matrix}\right)</script><p>对称/反射/翻转/镜像(Reflection)</p><p>$s_x=-1$ or $s_y=-1$​</p><h5 id="切变-Shear"><a href="#切变-Shear" class="headerlink" title="切变(Shear)"></a>切变(Shear)</h5><p><img src="/2021/09/13/GAMES101/Users\Alin\AppData\Roaming\Typora\typora-user-images\image-20210808150212844.png" alt="image-20210808150212844" style="zoom:33%;"></p><script type="math/tex; mode=display">\left(\begin{matrix}x'\\y'\end{matrix}\right)=\left(\begin{matrix}s_x & a \\0 & s_y\end{matrix}\right)\left(\begin{matrix}x\\y\end{matrix}\right)</script><h5 id="旋转-Rotate"><a href="#旋转-Rotate" class="headerlink" title="旋转(Rotate)"></a>旋转(Rotate)</h5><p>$R_{(\theta)}$</p><p>约定：默认绕原点逆时针旋转。</p><script type="math/tex; mode=display">R_\theta=\left(\begin{matrix}\cos\theta &-\sin\theta\\\sin\theta&\cos\theta\end{matrix}\right)</script><p>旋转矩阵是正交矩阵，也就是，它的逆等于转置。</p><h3 id="齐次坐标"><a href="#齐次坐标" class="headerlink" title="齐次坐标"></a>齐次坐标</h3><h4 id="为什么需要齐次坐标"><a href="#为什么需要齐次坐标" class="headerlink" title="为什么需要齐次坐标"></a>为什么需要齐次坐标</h4><h5 id="平移变换"><a href="#平移变换" class="headerlink" title="平移变换"></a>平移变换</h5><p>$T_{(t_x,t_y)}$​</p><script type="math/tex; mode=display">\left(\begin{matrix}x'\\y'\end{matrix}\right)=\left(\begin{matrix}x\\y\end{matrix}\right)+\left(\begin{matrix}t_x\\t_y\end{matrix}\right)</script><p>平移变换无法使用矩阵相乘的形式表示。因此平移操作并不是线性变换。</p><p>为了避免平移成为特殊情况，引入齐次坐标。</p><p>（二维情况下）增加一个维度(<code>w-coordinate</code>)</p><ul><li><p>2D point    $=(x,y,1)^T$</p></li><li><p>2D vector  $=(x,y,0)^T$​​​，最后一个维度是0，保证向量的平移不变性，使得平移操作对向量无效。</p></li></ul><p>容易发现，在齐次坐标下，有以下性质：</p><ul><li>vector + vector = vector</li><li>point - point = vector</li><li>point + vector = vector</li><li>point + point = ??</li></ul><p>在齐次坐标中，</p><script type="math/tex; mode=display">\left(\begin{matrix}x\\y\\w\end{matrix}\right) =\left(\begin{matrix}x/w\\y/w\\1\end{matrix}\right),w\neq0</script><h4 id="仿射变换-Affine"><a href="#仿射变换-Affine" class="headerlink" title="仿射变换(Affine)"></a>仿射变换(Affine)</h4><p>仿射变换=线性变换+平移，例如</p><script type="math/tex; mode=display">\left(\begin{matrix}x'\\y'\end{matrix}\right) =\left(\begin{matrix}a&b\\c&d\end{matrix}\right)\left(\begin{matrix}x\\y\end{matrix}\right)+\left(\begin{matrix}t_x\\t_y\end{matrix}\right)</script><p>可以使用齐次坐标表示为</p><script type="math/tex; mode=display">\left(\begin{matrix}x'\\y'\\1\end{matrix}\right) =\left(\begin{matrix}a&b&t_x\\c&d&t_y\\0&0&1\end{matrix}\right)\left(\begin{matrix}x\\y\\1\end{matrix}\right)</script><p>齐次坐标的代价：引入额外的维度（代价较小），在二维的仿射变换中最后一行是0 0 1；</p><h4 id="逆变换"><a href="#逆变换" class="headerlink" title="逆变换"></a>逆变换</h4><p>使用矩阵的逆$M^{-1}$​。</p><p>例如，$R(-\theta)=R^{-1}(\theta)$</p><h3 id="组合变换"><a href="#组合变换" class="headerlink" title="组合变换"></a>组合变换</h3><p>Transform ordering matters</p><p>仿射变换组合变换的矩阵可以提前相乘以保证性能。</p><p>如何实现矩阵绕某个点c旋转：</p><script type="math/tex; mode=display">T(c)\cdot R(\alpha)\cdot T(-c)</script><p>Matrices are applied right to left</p><h3 id="三维空间变换"><a href="#三维空间变换" class="headerlink" title="三维空间变换"></a>三维空间变换</h3><p>三维齐次坐标：</p><ul><li>3D point    $=(x,y,z,1)^T$</li><li>3D vector  $=(x,y,z,0)^T$</li></ul><p>$w\neq0$的情况与二维规定相同</p><p>三维仿射变换：</p><script type="math/tex; mode=display">\left(\begin{matrix}x'\\y'\\z'\\1\end{matrix}\right) =\left(\begin{matrix}a&b&c&t_x\\d&e&f&t_y\\g&h&i&t_z\\0&0&0&1\end{matrix}\right)\left(\begin{matrix}x\\y\\z\\1\end{matrix}\right)</script><h2 id="Lecture-4-Transformation-Cont"><a href="#Lecture-4-Transformation-Cont" class="headerlink" title="Lecture 4 Transformation Cont."></a>Lecture 4 Transformation Cont.</h2><h3 id="3D-Transformations-cont"><a href="#3D-Transformations-cont" class="headerlink" title="3D Transformations cont."></a>3D Transformations cont.</h3><p>绕x-, y-, z-轴旋转</p><p>x,y,z有循环对称性，因为$z\times x=y$而非$x\times z$，因此在$y$的旋转矩阵中，sin的符号与x-, z-轴相反。</p><p><img src="/2021/09/13/GAMES101/image-20210808163917086.png" alt="image-20210808163917086" style="zoom:33%;"></p><h4 id="一般的旋转"><a href="#一般的旋转" class="headerlink" title="一般的旋转"></a>一般的旋转</h4><p>绕任意轴的旋转都可以拆分为三个绕轴旋转</p><script type="math/tex; mode=display">R_{xyz}(\alpha,\beta,\gamma)=R_x(\alpha)R_y(\beta)R_z(\gamma)</script><ul><li><p>也被称作欧拉角</p></li><li><p>在飞行模拟中可以分为roll, pitch, yaw</p></li></ul><p><img src="/2021/09/13/GAMES101/image-20210810162132691.png" alt="image-20210810162132691" style="zoom:50%;"></p><h5 id="Rodrigues’s-Rotation-Formula"><a href="#Rodrigues’s-Rotation-Formula" class="headerlink" title="Rodrigues’s Rotation Formula"></a>Rodrigues’s Rotation Formula</h5><p>绕任意轴$\bold{n}$旋转角度$\alpha$​，轴$\mathbf n$过原点。</p><script type="math/tex; mode=display">R(\bold{n},a)=\cos\alpha \mathbf{I}+(1-\cos\alpha)\mathbf {nn^T}+\sin\alpha\left(\begin{matrix}0&-n_z&n_y \\n_z&0&-n_x\\-n_y&n_x&0\end{matrix}\right)</script><p>最右为叉乘矩阵。</p><p>推导过程<a href="https://blog.csdn.net/qq_36162042/article/details/115488168">https://blog.csdn.net/qq_36162042/article/details/115488168</a></p><p>若轴不过原点，则先平移使轴过原点，再做旋转，再平移回原起点。</p><h4 id="四元数"><a href="#四元数" class="headerlink" title="四元数"></a>四元数</h4><p>应用于解决插值问题，例如旋转矩阵中，15°和25°的旋转矩阵平均不是20°旋转矩阵。此处不过多提及。</p><h3 id="Viewing-Transformation"><a href="#Viewing-Transformation" class="headerlink" title="Viewing Transformation"></a>Viewing Transformation</h3><h4 id="View-视图-Camera变换"><a href="#View-视图-Camera变换" class="headerlink" title="View(视图)/Camera变换"></a>View(视图)/Camera变换</h4><h5 id="What-is-view-transmation"><a href="#What-is-view-transmation" class="headerlink" title="What is view transmation?"></a>What is view transmation?</h5><p>如何拍一张好照片？</p><ul><li>找一个好的位置把人群组织好（模型(model)变换）</li><li>找一个好的角度放置相机（视图(view)变换）</li><li>Cheese！（投影(projection)变换）</li></ul><p>M-V-P变换</p><h5 id="如何放置相机"><a href="#如何放置相机" class="headerlink" title="如何放置相机"></a>如何放置相机</h5><p>定义相机参数</p><ul><li>Position$\vec e$​</li><li>Look-at/gaze 方向$\hat g$​</li><li>Up direction $\hat g$​​ (相机本身的旋转)</li></ul><p><img src="/2021/09/13/GAMES101/image-20210810164802680.png" alt="image-20210810164802680" style="zoom:33%;"></p><p><strong>如果相机和其他物体的相对位置不变，则图像不会发生变化。</strong>因此，可以</p><ul><li>把相机移动至原点，look at -Z, up to Y</li><li>所有的变换都是物体相对于相机的变换（使用相对运动的概念）</li></ul><p><img src="/2021/09/13/GAMES101/image-20210810165129699.png" alt="image-20210810165129699"></p><p>将任意的相机移动至上述标准位置</p><p><img src="/2021/09/13/GAMES101/image-20210810171628795-16285869910931.png" alt="image-20210810171628795"></p><p>旋转矩阵是正交矩阵，因此它的逆等于它的转置。</p><p>相机做这样的变换，其他所有物品也需要做相同的变换，保证相对位置不变。</p><p>模型和视图变换通常一起进行，因此有时也被成为<strong>模型视图变换</strong>。</p><h4 id="Projection-投影-变换"><a href="#Projection-投影-变换" class="headerlink" title="Projection(投影)变换"></a>Projection(投影)变换</h4><p>投影在计算机图形学中：</p><ul><li>3D to 2D</li></ul><p><img src="/2021/09/13/GAMES101/image-20210810172650650-16285876123052.png" alt="image-20210810172650650" style="zoom:33%;"></p><p>透视投影视角汇聚于一点，正交投影相机位于无限远。</p><h5 id="正交-Orthographic-投影"><a href="#正交-Orthographic-投影" class="headerlink" title="正交(Orthographic)投影"></a>正交(Orthographic)投影</h5><p>通俗理解</p><ul><li>将相机位于原点，向-Z方向看，上方向为Y（与前述标准位置同）</li><li>丢弃掉Z轴所有内容</li><li>把结果Resize至$[-1,1]^2$</li></ul><p>实际操作</p><p>We want to map a cuboid [l(eft), r] x [b(ottom), t] x [f(ar), n] to the “canonical (正则、规范、标准)” cube $[-1, 1]^3$​</p><p><img src="/2021/09/13/GAMES101/image-20210810173624950-16285881866343.png" alt="image-20210810173624950" style="zoom:67%;"></p><h5 id="透视-Perspective-投影"><a href="#透视-Perspective-投影" class="headerlink" title="透视(Perspective)投影"></a>透视(Perspective)投影</h5><p>欧氏几何指同一平面内的几何学，透视投影涉及不同平面，因此平行线会相交。</p><p>回忆：齐次坐标下，(1,0,0,1)和(2,0,0,2)代表同一个点。</p><p><img src="/2021/09/13/GAMES101/image-20210810184800492.png" alt="image-20210810184800492"></p><p>规定：在挤压过程中，近平面上的所有点永远不变，远平面的z值不会变化，远平面的中心点不会发生变化。</p><p>挤压：按照相似三角形进行变换</p><p><img src="/2021/09/13/GAMES101/image-20210810185304546.png" alt="image-20210810185304546"></p><p><img src="/2021/09/13/GAMES101/image-20210810185313927.png" alt="image-20210810185313927"></p><script type="math/tex; mode=display">M_{persp\rightarrow ortho}=\left(\begin{matrix}n&0&0&0\\0&n&0&0\\?&?&?&?\\0&0&1&0\end{matrix}\right)</script><p>设第三行为$(A, B, C, D)$，则因为近平面和远平面上的点的z值都不发生变化，并且z值与x, y 无关，$A=B=0$.因此待定系数取得变换矩阵的第三行</p><script type="math/tex; mode=display">\left(\begin{matrix}n&0&0&0\\0&n&0&0\\0&0&C&D\\0&0&1&0\end{matrix}\right)\left(\begin{matrix}0\\0\\n\\1\end{matrix}\right)=\left(\begin{matrix}0\\0\\n^2\\n\end{matrix}\right)</script><p>远平面上的点的z值也不会发生变化，因此</p><script type="math/tex; mode=display">\left(\begin{matrix}n&0&0&0\\0&n&0&0\\0&0&C&D\\0&0&1&0\end{matrix}\right)\left(\begin{matrix}0\\0\\f\\1\end{matrix}\right)=\left(\begin{matrix}0\\0\\f^2\\f\end{matrix}\right)</script><p>有</p><script type="math/tex; mode=display">An+B=n^2\\Af+B=f^2</script><p>解得矩阵第三行为$(0, 0, n+f, -nf)$​.</p><p>因此</p><script type="math/tex; mode=display">M_{persp\rightarrow ortho}=\left(\begin{matrix}n&0&0&0\\0&n&0&0\\0&0&n+f&-nf\\0&0&1&0\end{matrix}\right)</script><script type="math/tex; mode=display">M_{persp}=M_{ortho}M_{persp\rightarrow ortho}</script><h2 id="Lecture-5-Rasrerization-1-Triangles"><a href="#Lecture-5-Rasrerization-1-Triangles" class="headerlink" title="Lecture 5 Rasrerization 1 (Triangles)"></a>Lecture 5 Rasrerization 1 (Triangles)</h2><h3 id="光栅化成像"><a href="#光栅化成像" class="headerlink" title="光栅化成像"></a>光栅化成像</h3><p>​    </p><h4 id="视锥"><a href="#视锥" class="headerlink" title="视锥"></a>视锥</h4><p>从摄像机出发，为看到的近平面定义宽度和高度，并定义</p><ul><li>宽高比(aspect ratio)=width / height，</li><li>视角(field-of-view, fovY垂直可视角，同时也有水平可视角)</li><li>l, r, b, t for left, right, bottom, top</li></ul><p><img src="/2021/09/13/GAMES101/image-20210810195728741.png" alt="image-20210810195728741"></p><p>(因为相机向$-Z$方向，所以距离为$|n|$​)</p><h3 id="屏幕"><a href="#屏幕" class="headerlink" title="屏幕"></a>屏幕</h3><h4 id="什么是屏幕"><a href="#什么是屏幕" class="headerlink" title="什么是屏幕"></a>什么是屏幕</h4><p>屏幕是一个二维数组，其中每一个元素都是一个像素。数组的大小为<strong>分辨率</strong>，屏幕是一个典型的<strong>光栅成像设备</strong>。</p><p>Raster == screen in Germen</p><h4 id="像素"><a href="#像素" class="headerlink" title="像素"></a>像素</h4><p> pixel short for picture element</p><p>像素的颜色是R/G/B的混合。</p><h4 id="屏幕空间"><a href="#屏幕空间" class="headerlink" title="屏幕空间"></a>屏幕空间</h4><p>以左下角为$(0, 0)$，右、上分别为x/y正方向，所有像素的坐标都为整数，从$(0, 0)$至$(width-1, height-1)$</p><p>像素$(x, y)$的中心在$(x+0.5, y+0.5)$</p><p>屏幕覆盖了从$[0, width]\times[0, height]$​的空间</p><h4 id="视口变换：正则立方体到屏幕"><a href="#视口变换：正则立方体到屏幕" class="headerlink" title="视口变换：正则立方体到屏幕"></a>视口变换：正则立方体到屏幕</h4><p>先略掉z值；</p><p>将x、y从$[-1,1]^2$映射至屏幕</p><script type="math/tex; mode=display">M_{viewport}=\left(\begin{matrix}\frac{width}{2}&0&0&\frac{width}{2}\\0&\frac{height}{2}&0&\frac{height}{2}\\0&0&1&0\\0&0&0&1\end{matrix}\right)</script><h3 id="光栅显示设备"><a href="#光栅显示设备" class="headerlink" title="光栅显示设备"></a>光栅显示设备</h3><ul><li><p>示波器</p></li><li><p>阴极射线管(Cathode Ray Tube, CRT)</p><p>逐行扫描，显示画面；隔行扫描技术提高了CRT的显示效率，在某些视频压缩技术中仍使用了隔行扫描的思想。在高速运动的情况下会产生画面撕裂。</p></li><li><p>Frame Buffer：将内存中的一片区域映射至屏幕上</p></li><li><p>平板显示设备</p><ul><li><p>分辨率高于人类视网膜分辨率的屏幕称为视网膜屏幕。</p></li><li><p>LCD(Liquid Crystal Display)</p><p>液晶通过排布影响光的偏振，影响显示效果。</p><p><img src="/2021/09/13/GAMES101/image-20210810204024996.png" alt="image-20210810204024996" style="zoom:50%;"></p></li><li><p>LED(Light Emitting Diode)</p></li><li><p>Electrophoretic(Electronic Ink) Display</p><p>通过控制墨水是在上方还是下方显示。刷新率很低。</p><p><img src="/2021/09/13/GAMES101/image-20210810204248926-16285993706894.png" alt="image-20210810204248926"></p></li></ul></li></ul><h3 id="Polygon-Meshes"><a href="#Polygon-Meshes" class="headerlink" title="Polygon Meshes"></a>Polygon Meshes</h3><p>Triangles - Fundamental Shape Primitives</p><h4 id="Why-triangles"><a href="#Why-triangles" class="headerlink" title="Why triangles"></a>Why triangles</h4><ul><li>最基础的多边形<ul><li>所有多边形都可以拆成三角形</li></ul></li><li>独特的性质<ul><li>三角形都是共面的；</li><li>三角形的内外定义非常清晰（凹凸多边形、内部有洞等）；</li><li>三角形对于插值十分友好。</li></ul></li></ul><h4 id="采样"><a href="#采样" class="headerlink" title="采样"></a>采样</h4><p>通过采样将一个连续函数离散化。</p><h4 id="三角形中的采样"><a href="#三角形中的采样" class="headerlink" title="三角形中的采样"></a>三角形中的采样</h4><p>Sample if Each Pixel Center Is Inside Triangle</p><script type="math/tex; mode=display">inside(t,x,y)=\big\{\begin{matrix}1, if(x,y)inside\;triangle\;t\\0,otherwise\end{matrix}</script><p>判断点在三角形内部的方法：点与顶点连线，轮换地判断顶点与给定点与顶点连线的叉积方向，三个叉积方向一致则在三角形内部。</p><h5 id="边界情况"><a href="#边界情况" class="headerlink" title="边界情况"></a>边界情况</h5><p>当一个点在两个三角形边界时，有统一的定义即可。某些图形学API有严格的定义。</p><h5 id="包围盒"><a href="#包围盒" class="headerlink" title="包围盒"></a>包围盒</h5><p>使用轴向包围盒，避免检测所有的边界。</p><p><img src="/2021/09/13/GAMES101/image-20210811211919929.png" alt="image-20210811211919929" style="zoom:67%;"></p><p>Axis-aligned-bounding-box(AABB)</p><p>针对不同情况，使用不同的包围盒（不一定非要使用轴向的），减少像素的检测个数。</p><h4 id="实际像素排列"><a href="#实际像素排列" class="headerlink" title="实际像素排列"></a>实际像素排列</h4><p>在LCD屏幕上，像素按照一定的bayer pattern排列</p><p>人眼对绿色最为敏感，因此Bayer pattern中绿色点更多。</p><p>在彩色打印机上，有其他的排列方式。</p><h4 id="锯齿"><a href="#锯齿" class="headerlink" title="锯齿"></a>锯齿</h4><p>由于像素本身具有大小和采样率问题，结果上会存在锯齿。因此会引入抗锯齿。</p><h2 id="Lecture-6-Rasterization-2-Antialiasing-and-Z-Buffering"><a href="#Lecture-6-Rasterization-2-Antialiasing-and-Z-Buffering" class="headerlink" title="Lecture 6 Rasterization 2 (Antialiasing and Z-Buffering)"></a>Lecture 6 Rasterization 2 (Antialiasing and Z-Buffering)</h2><p>光栅化=对2d坐标进行采样</p><p>照片=对抵达感光元件的光线信息进行采样</p><p>视频=对时间进行采样</p><p>采样有可能会产生锯齿、摩尔纹（去掉奇数行和列会导致摩尔纹）</p><ul><li>锯齿- sampling in space</li><li>Moire- undersampling images</li><li>Wagon wheel effect - sampling in time</li></ul><p>统称为“走样（Aliasing）”</p><p>出现走样的原因：信号变化太快，采样的速率跟不上信号变化速度。</p><p>反走样的思路：<strong>在采样前对信号进行模糊处理（滤波）</strong></p><p><img src="/2021/09/13/GAMES101/image-20210812174804139.png" alt="image-20210812174804139"></p><p>先采样后进行滤波不可行。因为采样后已经产生了信号的混叠，此时再截断已经无法避免信号的混叠。</p><h3 id="频域"><a href="#频域" class="headerlink" title="频域"></a>频域</h3><h4 id="傅里叶级数展开"><a href="#傅里叶级数展开" class="headerlink" title="傅里叶级数展开"></a>傅里叶级数展开</h4><p>将任意一个函数描述为一系列正弦函数的和。</p><h4 id="傅里叶变换"><a href="#傅里叶变换" class="headerlink" title="傅里叶变换"></a>傅里叶变换</h4><script type="math/tex; mode=display">F(\omega)=\int_{-\infty}^\infty f(x)e^{-2\pi i \omega x}\mathrm dx</script><p>将函数分解为不同频率的段。</p><h4 id="频域与采样"><a href="#频域与采样" class="headerlink" title="频域与采样"></a>频域与采样</h4><p>函数中的低频部分能够更好地通过采样保留其特征。高频部分会损失更多精度。</p><p>若函数频率较高，则应采用更高频率的采样。</p><h4 id="滤波"><a href="#滤波" class="headerlink" title="滤波"></a>滤波</h4><p>去掉函数中特定频率的部分。</p><h4 id="图像的傅里叶变换"><a href="#图像的傅里叶变换" class="headerlink" title="图像的傅里叶变换"></a>图像的傅里叶变换</h4><p>对于自然界中的绝大多数信息，低频信息较多，高频信息较少。图片中内容变化越剧烈，对应分量的频率越高。</p><p>附录：如何理解图片的傅里叶变换<a href="https://www.zhihu.com/question/29246532">https://www.zhihu.com/question/29246532</a></p><p>高通滤波器：保留图像内容的边界；</p><p>带通滤波器：保留图片的某些边界；</p><p>低通滤波器：对图像进行模糊；</p><h3 id="滤波-卷积-平均"><a href="#滤波-卷积-平均" class="headerlink" title="滤波=卷积=平均"></a>滤波=卷积=平均</h3><p>卷积定理：时域上对两个信号的卷积等于频域上对两个信号的乘积，反之亦然（时域上的乘积对应频域上的卷积）。</p><p>选项1：</p><ol><li>在时域上对图像进行卷积</li></ol><p>选项2：</p><ol><li>将图像和卷积核傅里叶变换至频域</li><li>将两者相乘</li><li>逆傅里叶变换至时域</li></ol><p><img src="/2021/09/13/GAMES101/image-20210812192646298.png" alt="image-20210812192646298"></p><h4 id="卷积核"><a href="#卷积核" class="headerlink" title="卷积核"></a>卷积核</h4><p>卷积核归一化，保证整张图像亮度不变。</p><p>Wider Filter Kernel = Lower Frequencies</p><p>更大的卷积核会保留更小的频率，会使得图片更模糊(例如从$3\times3$的卷积核换至$7\times7$的卷积核)</p><h4 id="采样-重复频域上的内容"><a href="#采样-重复频域上的内容" class="headerlink" title="采样=重复频域上的内容"></a>采样=重复频域上的内容</h4><p>时域上的采样=冲激函数(c)与待采样(a)函数相乘</p><p><img src="/2021/09/13/GAMES101/image-20210812193850380.png" alt="image-20210812193850380"></p><p>频域上的采样=冲激函数(d)与待采样函数(b)的卷积，结果是原信号的单移</p><p>(TODO：阅读虎书第9章)</p><p>走样=频谱单移距离小，频域内容产生混叠</p><p><img src="/2021/09/13/GAMES101/image-20210812195333741.png" alt="image-20210812195333741"></p><h3 id="反走样"><a href="#反走样" class="headerlink" title="反走样"></a>反走样</h3><h4 id="选择1：增大采样率"><a href="#选择1：增大采样率" class="headerlink" title="选择1：增大采样率"></a>选择1：增大采样率</h4><p>并不总是可行</p><h4 id="选择2：反走样"><a href="#选择2：反走样" class="headerlink" title="选择2：反走样"></a>选择2：反走样</h4><p>在单移之前让频谱内容更窄；</p><p><img src="/2021/09/13/GAMES101/image-20210812200026251.png" alt="image-20210812200026251"></p><p>在采样之前进行滤波操作。</p><p>使用一定大小的低通滤波器，对三角形进行卷积。</p><h5 id="反走样的思路"><a href="#反走样的思路" class="headerlink" title="反走样的思路"></a>反走样的思路</h5><ul><li>1x1滤波器（低通）</li></ul><p><img src="/2021/09/13/GAMES101/image-20210812200210621.png" alt="image-20210812200210621"></p><ul><li>对于每一个像素内部进行卷积（例如，确定三角形内面积的占比）（近似“模糊”的过程）</li><li>对每个像素中心进行采样</li></ul><h5 id="实际操作：通过多重采样进行反走样（MSAA）"><a href="#实际操作：通过多重采样进行反走样（MSAA）" class="headerlink" title="实际操作：通过多重采样进行反走样（MSAA）"></a>实际操作：通过多重采样进行反走样（MSAA）</h5><p>MSAA：Short for MultiSampling Anti-Aliasing</p><p>这是上述反走样思路的近似实现，并不能完全解决走样问题。</p><p>Approximate the effect of the 1-pixel box filter by sampling multiple locations within a pixel and averaging their values。</p><p><img src="/2021/09/13/GAMES101/image-20210812201044662.png" alt="image-20210812201044662" style="zoom:50%;"></p><p>多重采样越密集，反走样效果越好。</p><p>MSAA解决了反走样过程中的“模糊”这一步，它没有通过提高分辨率而解决走样问题。</p><h5 id="MSAA的代价："><a href="#MSAA的代价：" class="headerlink" title="MSAA的代价："></a>MSAA的代价：</h5><p>增大了计算数倍量来达成了抗锯齿效果。</p><p>在工业界上，多重采样的像素点分布并不总是规则分布的，而是按照特定的图案分布、临近采样点复用等降低采样代价。</p><h5 id="MSAA之外"><a href="#MSAA之外" class="headerlink" title="MSAA之外"></a>MSAA之外</h5><p>现代图形学的抗锯齿方案里程碑：</p><ul><li>FXAA (Fast Approximate AA)</li><li>TAA (Temporal AA)</li></ul><h5 id="超分辨率-超采样"><a href="#超分辨率-超采样" class="headerlink" title="超分辨率/超采样"></a>超分辨率/超采样</h5><p>与抗锯齿类似的概念，例如$512\times512$的图拉伸至$1024\times1024$​的图片，而避免产生锯齿。超分辨率和抗锯齿都致力于解决采样不足的问题。</p><ul><li>DLSS(Deep Learning Super Sampling)</li></ul><h3 id="可见性和遮挡"><a href="#可见性和遮挡" class="headerlink" title="可见性和遮挡"></a>可见性和遮挡</h3><h4 id="画家算法"><a href="#画家算法" class="headerlink" title="画家算法"></a>画家算法</h4><p>画家算法(Painter’s Algorithm)：由远及近，进处的物体overwrite远处的内容，由远及近进行光栅化。难题：如何<strong>定义远近</strong>？</p><p>画家算法需要首先按照深度排序，$O(n\log n)$​​复杂度for n objects。但也存在某些意外的情况，如下图三个互相重叠的三角形：</p><p><img src="/2021/09/13/GAMES101/image-20210812203827016.png" alt="image-20210812203827016" style="zoom:50%;"></p><h4 id="深度缓存-深度缓冲-Z-buffer"><a href="#深度缓存-深度缓冲-Z-buffer" class="headerlink" title="深度缓存/深度缓冲(Z-buffer)"></a>深度缓存/深度缓冲(Z-buffer)</h4><p>想法：对于每个像素，储存深度（类似画家算法的远近），依次完成光栅化。</p><p>在生成用户看到的实际图像(frame buffer)的同时，也会生成一张深度图（也称深度缓存, depth buffer/z-buffer）</p><p><img src="/2021/09/13/GAMES101/image-20210812204351577.png" alt="image-20210812204351577" style="zoom:30%;"></p><p>重要：为了简明性，我们假定所有z都是正值（之前规定摄像机朝向-Z方向），在这里越小的z表示离摄像机越近，越大越远。</p><p>Initialize depth buffer to $\infty$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (each triangle T)</span><br><span class="line"><span class="keyword">for</span> (each <span class="built_in">sample</span> (x,y,z) in T)</span><br><span class="line"><span class="keyword">if</span> (z &lt; zbuffer[x,y]) <span class="comment">// closest sample so far</span></span><br><span class="line">framebuffer[x,y] = rgb; <span class="comment">// update color</span></span><br><span class="line">zbuffer[x,y] = z; <span class="comment">// update depth</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">; <span class="comment">// do nothing, this sample is occluded</span></span><br></pre></td></tr></table></figure><p>复杂度：</p><p>如果每个三角形都覆盖常数个像素，则$O(n)$​ for n个三角形。</p><p>由于所有的Z值都是浮点型，Z值相等的情况极为罕见。</p><p>在部分反走样算法中，不一定是对每一个像素点做Zbuffer，而是对每一个采样点做Zbuffer。</p><p>Zbuffer无法处理透明物体，需要特殊处理。</p><h2 id="Lecture-7-Shading-1-Illumination-Shading-and-Graphics-Pipeline"><a href="#Lecture-7-Shading-1-Illumination-Shading-and-Graphics-Pipeline" class="headerlink" title="Lecture 7 Shading 1 (Illumination, Shading and Graphics Pipeline)"></a>Lecture 7 Shading 1 (Illumination, Shading and Graphics Pipeline)</h2><p>目前为止，已经学习了视图变换、投影、三角形光栅化等内容；下一步是确定每个像素的值，也就是着色。</p><h3 id="着色"><a href="#着色" class="headerlink" title="着色"></a>着色</h3><p>着色，即向不同物体应用不同<strong>材质</strong>的过程。不同的材质和光线有不同的相互作用。</p><h3 id="Blinn-Phong反射模型"><a href="#Blinn-Phong反射模型" class="headerlink" title="Blinn-Phong反射模型"></a>Blinn-Phong反射模型</h3><p>一种简单的着色模型。光源在同一个物体上一般会形成下面三种效果：</p><ul><li>高光（镜面反射）</li><li>漫反射</li><li>间接光照</li></ul><p>定义：</p><p><img src="/2021/09/13/GAMES101/image-20210813141632581.png" alt="image-20210813141632581"></p><p>$\vec v\vec n\vec l$​​​​均为单位向量，且三个向量的起点均为shading point。着色是<strong>局部的</strong>，计算时仅计算着色点、光源和相机，不考虑其他物体。因此在着色过程中，不会产生阴影。shading$\neq$​shadow</p><h4 id="漫反射"><a href="#漫反射" class="headerlink" title="漫反射"></a>漫反射</h4><p>光被均匀地反射到各个不同的方向。</p><p>物体收到的光线能量与表面法线与光线的夹角的余弦值正比。</p><p><img src="/2021/09/13/GAMES101/image-20210813142430057.png" alt="image-20210813142430057" style="zoom:33%;"></p><h5 id="点光源的能量耗散"><a href="#点光源的能量耗散" class="headerlink" title="点光源的能量耗散"></a>点光源的能量耗散</h5><p>假设点光源在单位距离的单位面积能量为$I$​​，则距离r处的能量为$\frac I {r^2}$​。在辐射度量学一节中，将会解释为什么不考虑观察点与物体之间的距离引起的亮度衰减。​</p><h5 id="漫反射公式"><a href="#漫反射公式" class="headerlink" title="漫反射公式"></a>漫反射公式</h5><p><img src="/2021/09/13/GAMES101/image-20210813144141684.png" alt="image-20210813144141684"></p><p>由于是单位向量，因此点乘的结果即为余弦值。</p><p>某点处有颜色的原因：该处会吸收某些颜色的光，反射它不吸收颜色的光，因此会显示出某种颜色。</p><p>由于漫反射会均匀地发散至空间各处，因此无论从何处观察，漫反射的结果总是一致。漫反射的公式也因此与$\vec v$无关。</p><h2 id="Lecture-8-Shading-2-Shading-Pipeline-and-Texture-Mapping"><a href="#Lecture-8-Shading-2-Shading-Pipeline-and-Texture-Mapping" class="headerlink" title="Lecture 8 Shading 2 (Shading, Pipeline and Texture Mapping)"></a>Lecture 8 Shading 2 (Shading, Pipeline and Texture Mapping)</h2><h3 id="镜面反射-高光"><a href="#镜面反射-高光" class="headerlink" title="镜面反射/高光"></a>镜面反射/高光</h3><p>当观察方向和镜面反射方向（光源方向的镜面对称方向）比较接近时，会出现高光项。</p><p>Blinn-Phong模型：当观察方向和镜面反射方向相近时，法线方向和<strong>半程向量</strong>方向相近。</p><p>半程向量</p><script type="math/tex; mode=display">\vec h=bisector(\vec v + \vec l)=\frac{\vec v +\vec l}{||\vec v +\vec l||}</script><p>类似地，有</p><script type="math/tex; mode=display">L_s=k_s(I/r^2)\max(0,\vec n\cdot\vec h)^p</script><p>$k_s$​为镜面反射系数，因为高光通常是白色的，所以高光通常是白色项。blinn-phong模型中忽略了$\vec n\cdot\vec l$​项，也就是忽略掉了​着色点在此处接收到的光照项，在更精确的模型中往往不能忽略这一项。</p><p>指数项$p$​增大两向量之间距离差距造成的衰减，使得更大的角度差距会造成这一项因子更小。在blinn-phong模型中，p的取值一般为100~200之间</p><p><img src="/2021/09/13/GAMES101/image-20210813152543661.png" alt="image-20210813152543661"></p><h3 id="环境光照"><a href="#环境光照" class="headerlink" title="环境光照"></a>环境光照</h3><p>来自四面八方的光照，使得某个着色点即使没有被光源直接照亮，也有一定的亮度。</p><p>Blinn-phong模型中，假设各点处的环境光照都是相同的，并且与观测方向、法线方向也无关。</p><script type="math/tex; mode=display">L_a=k_aI_a</script><p>这是一个粗略的假设，之后需要<strong>全局光照</strong>进行更精确的计算。</p><p><img src="/2021/09/13/GAMES101/image-20210813153024814.png" alt="image-20210813153024814"></p><h3 id="着色频率"><a href="#着色频率" class="headerlink" title="着色频率"></a>着色频率</h3><h4 id="Flat-shading"><a href="#Flat-shading" class="headerlink" title="Flat shading"></a>Flat shading</h4><p>对于每个三角形求一个法线，然后三角形进行着色。</p><p>对于光滑的平面效果不佳。</p><p>逐三角形/逐面着色。</p><h4 id="Gouraud-shading"><a href="#Gouraud-shading" class="headerlink" title="Gouraud shading"></a>Gouraud shading</h4><p>对于三角形每个顶点求法线。每个顶点着色，三角形内部着色通过插值得到。</p><p>逐顶点着色。</p><h4 id="Phong-shading"><a href="#Phong-shading" class="headerlink" title="Phong shading"></a>Phong shading</h4><p>计算每一个顶点的法线，插值得到每一个像素的法线，然后对每一个像素进行着色。</p><p>与Blinn-Phong模型不同。</p><p>逐像素着色。</p><p>当模型足够复杂/面数足够多时，逐像素着色的工作量不一定最大，逐面着色效果也不一定差。（例如，面数大于像素数的情形。）</p><h4 id="三角形顶点的法线"><a href="#三角形顶点的法线" class="headerlink" title="三角形顶点的法线"></a>三角形顶点的法线</h4><ul><li>根据基础形状获取法线方向。例如，通过三角形面组成球面，则根据球面的法线方向求三角形顶点的法线方向。</li><li>通过三角形面法线方向推断顶点法线方向。例如顶点关联的三角形法线的平均（简单平均或加权平均）。</li></ul><h4 id="每个像素的法线"><a href="#每个像素的法线" class="headerlink" title="每个像素的法线"></a>每个像素的法线</h4><p>重心坐标插值。</p><h3 id="图形管线-实时渲染管线"><a href="#图形管线-实时渲染管线" class="headerlink" title="图形管线/实时渲染管线"></a>图形管线/实时渲染管线</h3><p><img src="/2021/09/13/GAMES101/image-20210813160950444.png" alt="image-20210813160950444"></p><h4 id="Shader程序"><a href="#Shader程序" class="headerlink" title="Shader程序"></a>Shader程序</h4><p>GLSL与C++的语法非常相似。</p><p>Shader程序允许用户自定义逐面/逐顶点/逐像素的着色方法。</p><p><a href="https://www.shadertoy.com/">https://www.shadertoy.com/</a></p><h4 id="现代图形学的发展"><a href="#现代图形学的发展" class="headerlink" title="现代图形学的发展"></a>现代图形学的发展</h4><p>GPU可以高度并行地处理复杂的三角形和着色。</p><p>GPU是图形管线的硬件实，有一部分是可编程的，如顶点着色器和片段/像素着色器等。</p><p>GPU是高度并行化的多核处理器。</p><h3 id="纹理映射-Texture-Mapping"><a href="#纹理映射-Texture-Mapping" class="headerlink" title="纹理映射(Texture Mapping)"></a>纹理映射(Texture Mapping)</h3><p>定义任何一个点的基本属性（例如，漫反射系数等）</p><h4 id="物体表面"><a href="#物体表面" class="headerlink" title="物体表面"></a>物体表面</h4><p>任何三维物体的表面都是二维的。</p><p>纹理(Texture)上的每个点和实际物体上的每个点是一一对应的。</p><p>在实际的模型中，每个三角形都复制纹理上的一部分图像，对应一个纹理坐标$(u,v)$​,$u,v\in[0,1]$</p><p>三角形的每个顶点都对应一个(u,v)，映射方法在本课程中不做展开讲述。</p><p>纹理映射并不必须是单射，也就是，同一个(u,v)可以被多个顶点复用。</p><p>tileable texture：纹理的上方和下方、左方和右方可以无缝衔接。</p><h2 id="Lecture-9-Shading-3-Texture-Mapping-cont"><a href="#Lecture-9-Shading-3-Texture-Mapping-cont" class="headerlink" title="Lecture 9 Shading 3 (Texture Mapping cont.)"></a>Lecture 9 Shading 3 (Texture Mapping cont.)</h2><h3 id="三角形内部的插值：重心坐标"><a href="#三角形内部的插值：重心坐标" class="headerlink" title="三角形内部的插值：重心坐标"></a>三角形内部的插值：重心坐标</h3><p>应用于纹理坐标、颜色、法线方向等。</p><p>三角形所在平面上的任意一点(x, y)，满足</p><script type="math/tex; mode=display">(x,y)=\alpha A+\beta B+\gamma C\\\alpha+\beta+\gamma=1</script><p>由于三个系数线性相关，只要有两个系数就可以确定另一个。</p><p>如果$\alpha+\beta+\gamma\neq1$，则这个点不在三角形平面内。</p><p>如果这三个系数都是非负的，那么这个点在三角形内（包含边界）。</p><p><img src="/2021/09/13/GAMES101/image-20210813220900279.png" alt="image-20210813220900279" style="zoom:50%;"></p><p>重心坐标可以通过顶点“对面”的三角形面积占总面积的比值求出（上图）。</p><p>从这个定义，我们可以得出$(\frac 1 3,\frac 1 3,\frac 1 3)$是三角形的重心。</p><p>同时，也可以用下面的公式求出重心坐标：</p><p><img src="/2021/09/13/GAMES101/image-20210813221246314.png" alt="image-20210813221246314" style="zoom:50%;"></p><h3 id="使用重心坐标插值"><a href="#使用重心坐标插值" class="headerlink" title="使用重心坐标插值"></a>使用重心坐标插值</h3><script type="math/tex; mode=display">V=\alpha V_A+\beta V_B+\gamma V_C</script><p>使用该公式对位置、纹理、坐标、深度等属性进行插值。</p><p>在投影变换下，<strong>不能</strong>保证重心坐标的不变。例如，先（三维空间的）插值后再做投影变换，可能会与先做投影变换再做（屏幕空间的）插值的结果不同。</p><p>待看：<a href="https://zhuanlan.zhihu.com/p/144331875">计算机图形学六：透视矫正插值和图形渲染管线总结 - 知乎 (zhihu.com)</a></p><p>因此，如果要做三维空间的插值，应该先做（三维空间的）插值，然后做投影变换，映射至屏幕空间。</p><h3 id="应用纹理"><a href="#应用纹理" class="headerlink" title="应用纹理"></a>应用纹理</h3><p><img src="/2021/09/13/GAMES101/image-20210814160604026.png" alt="image-20210814160604026"></p><p>问题：</p><h4 id="纹理放大-Texture-Magnification"><a href="#纹理放大-Texture-Magnification" class="headerlink" title="纹理放大(Texture Magnification)"></a>纹理放大(Texture Magnification)</h4><p>纹理上的像素——texel，纹理元素</p><p>纹理本身比较小， 而需要贴图的位置较大。简单的处理方法是，将计算得到的纹理坐标四舍五入至最近的纹理元素。此时多个像素会被映射至同一个纹理元素。</p><h5 id="双线性插值"><a href="#双线性插值" class="headerlink" title="双线性插值"></a>双线性插值</h5><p><img src="/2021/09/13/GAMES101/image-20210814161204829.png" alt="image-20210814161204829"></p><p>前文中的简单方法是，找最近的纹理元素，这会导致多个像素有相同的纹理。</p><p>双线性插值的做法是，找该点最近的四个元素，进行线性插值。</p><p><img src="/2021/09/13/GAMES101/image-20210814163251579.png" alt="image-20210814163251579"></p><p>双线性插值仍不是当前质量最佳的插值法。</p><h5 id="Bicubic-插值"><a href="#Bicubic-插值" class="headerlink" title="Bicubic 插值"></a>Bicubic 插值</h5><p>取周围的16个点进行更多的插值。</p><p>更多的计算量，提高质量。</p><h4 id="纹理缩小"><a href="#纹理缩小" class="headerlink" title="纹理缩小"></a>纹理缩小</h4><p>当纹理过大时，会引起更大的走样问题。</p><p><img src="/2021/09/13/GAMES101/image-20210814164516162.png" alt="image-20210814164516162"></p><p>原因：同样一个像素，对应纹理图上不同大小的范围。近处一个像素对应纹理图上较小的范围，而远处的一个像素会对应更大的纹理图范围。</p><p><img src="/2021/09/13/GAMES101/image-20210814164617463.png" alt="image-20210814164617463"></p><p>此时不能单纯地用像素中心计算纹理坐标。</p><p>使用超采样可以解决走样问题，但是会引起较大的开销。</p><p>问题原因：在一个像素内，包含了多个纹理元素。也就是，像素（采样频率）大于纹理元素（信号频率）。</p><p>解决方案：避免采样，计算一个像素对应的纹理元素区域的平均值。</p><p>点查询问题和范围查询问题。</p><h5 id="Mipmap：快速的近似正方形范围查询算法"><a href="#Mipmap：快速的近似正方形范围查询算法" class="headerlink" title="Mipmap：快速的近似正方形范围查询算法"></a>Mipmap：快速的近似正方形范围查询算法</h5><p>生成多张纹理，使得每一张纹理都是前一级分辨率的一半。</p><p><img src="/2021/09/13/GAMES101/image-20210814165452955.png" alt="image-20210814165452955"></p><p>在计算机视觉方面的Mip金字塔（Mip hierarchy）是相似的概念。</p><p>Mipmap只额外占用1/3的存储空间（级数求和）</p><p>计算结束Mipmap后，使用渲染点与其邻近两个像素，求其在纹理图上所占大小，映射至特定层的Mipmap：</p><p><img src="/2021/09/13/GAMES101/image-20210814170648276.png" alt="image-20210814170648276"></p><p>右式：估算屏幕上一个像素对应纹理坐标系下的边长；（这只是估算方法之一，max是为简单起见的估计）</p><p>左式：计算使用第几层Mipmap；</p><p>如果D不是整数，例如D=1.8，则在上一层(D=1)和(D=2)层上分别进行插值，然后这两层之间再使用层数作为权重再进行一次插值。（三线性插值）</p><p>如此，做两次查询，通过三线性插值，就可以得出连续的纹理区域范围内的平均。</p><h5 id="Mipmap：Overblur问题"><a href="#Mipmap：Overblur问题" class="headerlink" title="Mipmap：Overblur问题"></a>Mipmap：Overblur问题</h5><p>Mipmap会造成Overblur。由于Mipmap只能查询正方形范围的平均，以及插值带来的平均，因此会导致overblur</p><h6 id="各向异性过滤-Anisotropic-Filtering"><a href="#各向异性过滤-Anisotropic-Filtering" class="headerlink" title="各向异性过滤(Anisotropic Filtering)"></a>各向异性过滤(Anisotropic Filtering)</h6><p>由于Mipmap只能进行长宽的均匀压缩，只能适用于正方形范围。</p><p><img src="/2021/09/13/GAMES101/image-20210814171914450.png" alt="image-20210814171914450"></p><p>由于采样范围并不总是正方形，Mipmap会扩大求平均值的范围，造成overblur。</p><p><img src="/2021/09/13/GAMES101/image-20210814172206554.png" alt="image-20210814172206554"></p><p>Mipmap只能产生上图的对角线，各向异性过滤补全了上图的其他部分。</p><p>上图又被成为Ripmap。各向异性：在纵向和横向上的表现不同。2x各向异性过滤：在横向和纵向上产生2张压缩图像。当各向异性过滤级别足够高时，额外开销收敛至原来的2倍。各向异性过滤只对显存有影响，几乎不会影响计算性能。</p><p>各向异性过滤对于矩形的查询可以得到比Mipmap更好的结果，但是对于倾斜矩形的查询，仍然无法解决全部问题。</p><h6 id="EWA过滤"><a href="#EWA过滤" class="headerlink" title="EWA过滤"></a>EWA过滤</h6><p>将不规则的图形拆成多个圆形，进行多次查询。</p><h3 id="纹理的应用"><a href="#纹理的应用" class="headerlink" title="纹理的应用"></a>纹理的应用</h3><p>在现代GPU中，纹理=显存中的内容+允许范围查询（滤波）</p><h4 id="环境光照-环境映射-环境贴图-Enviroment-Map"><a href="#环境光照-环境映射-环境贴图-Enviroment-Map" class="headerlink" title="环境光照/环境映射/环境贴图(Enviroment Map)"></a>环境光照/环境映射/环境贴图(Enviroment Map)</h4><p>可以使用纹理描述环境光的样式，并渲染在物体上。环境光不止指太阳光，环境中的物体能被我们看到，是因为其反射了一定的光线，环境中的物体也是环境光的一部分。</p><h4 id="Spherical-Environment-Map"><a href="#Spherical-Environment-Map" class="headerlink" title="Spherical Environment Map"></a>Spherical Environment Map</h4><p>将环境光保存在一个球体上。但是在展开时会出现扭曲问题，球面上纬度较高处占面积较小。</p><p>为了解决这个问题，使用Cube Map</p><h5 id="Cube-Map"><a href="#Cube-Map" class="headerlink" title="Cube Map"></a>Cube Map</h5><p><img src="/2021/09/13/GAMES101/image-20210815135707435.png" alt="image-20210815135707435" style="zoom:67%;"></p><p>将球上的环境光反向延长线至立方体对应的六个面上。</p><h4 id="凹凸贴图-法线贴图"><a href="#凹凸贴图-法线贴图" class="headerlink" title="凹凸贴图/法线贴图"></a>凹凸贴图/法线贴图</h4><p>纹理不一定只能描述颜色，它可以定义不同位置不同的属性，例如可以定义物体不同部位沿法线方向向上向下凹凸的程度。在不把物体模型变复杂的前提下，可以通过应用一个复杂的纹理来使纹理变得更加精细。</p><p>在不同位置看到凹凸效果，是因为物体表面的高度影响了物体表面法线的位置，影响了阴影效果。</p><p><img src="/2021/09/13/GAMES101/image-20210815144810931.png" alt="image-20210815144810931" style="zoom:50%;"></p><p>通过法线贴图，可以在不增大三角形面数的情况下增加表面的细节。</p><p>通过法线贴图，影响物体表面各处的法线位置。</p><p>使用差分求出法线贴图的切线，然后它逆时针旋转90°即为法线方向。</p><p><img src="/2021/09/13/GAMES101/image-20210816145250204.png" alt="image-20210816145250204"></p><p>3D情况下：</p><p><img src="/2021/09/13/GAMES101/image-20210816145601381.png" alt="image-20210816145601381"></p><p>需要注意的是，在上述两个例子中，法线方向都被默认为了(0,1)或(0,0,1)，实际操作中要建立一个局部坐标系，使得法线方向是上述坐标，计算完毕后再映射回世界坐标系。</p><h4 id="位移贴图"><a href="#位移贴图" class="headerlink" title="位移贴图"></a>位移贴图</h4><p>法线贴图的现代版本；凹凸贴图没有实际改变物体的几何形状，只是改变了法线方向；位移贴图则是直接改变各个三角形的位置。</p><p>凹凸贴图在边缘、模型本身具有大量阴影区域时效果不佳；</p><p>位移贴图需要模型具有足够多的三角形面数，三角形的频率要高于纹理贴图的频率。</p><p>DirectX的动态曲面细分：初始有较少的三角形面数，根据需要再产生更多的三角形面数。</p><h4 id="三维噪声函数-三维纹理"><a href="#三维噪声函数-三维纹理" class="headerlink" title="三维噪声函数+三维纹理"></a>三维噪声函数+三维纹理</h4><p>定义一个噪声函数，动态地生成纹理，在空间的每一个点都对应一个纹理元素。例如Perlin Noise</p><h4 id="保存预计算结果"><a href="#保存预计算结果" class="headerlink" title="保存预计算结果"></a>保存预计算结果</h4><p>例如，可以使用纹理保存环境光遮蔽的结果。</p><h4 id="三维纹理和体积渲染"><a href="#三维纹理和体积渲染" class="headerlink" title="三维纹理和体积渲染"></a>三维纹理和体积渲染</h4><p>可以将体积渲染内容保存在模型里面，也可以保存在纹理里面。</p><h2 id="Lecture-10-Geometry-1-Introduction"><a href="#Lecture-10-Geometry-1-Introduction" class="headerlink" title="Lecture 10 Geometry 1 (Introduction)"></a>Lecture 10 Geometry 1 (Introduction)</h2><ul><li>如何保存几何体</li><li>如何将几何体渲染至屏幕上</li></ul><h3 id="表示几何的方式"><a href="#表示几何的方式" class="headerlink" title="表示几何的方式"></a>表示几何的方式</h3><h4 id="隐式-Implicit-几何表示"><a href="#隐式-Implicit-几何表示" class="headerlink" title="隐式(Implicit)几何表示"></a>隐式(Implicit)几何表示</h4><p>通过点的分类来表示几何。</p><ul><li><p>点满足某些关系</p><p>e.g. 3D球面上的点满足$x^2+y^2+z^2=1$​​. 更一般地，$f(x,y,z)=0$​.</p></li><li><p>Constructive Solid Geometry（CSG）</p><p>e.g. 通过一系列简单几何的布尔运算定义新的几何体</p></li></ul><p>  <img src="/2021/09/13/GAMES101/image-20210816155506313.png" alt="image-20210816155506313" style="zoom:50%;"></p><ul><li><p>距离函数</p><p>空间中的任何一个点到想要表现的几何形体的最小距离（正值表示在物体外部，负值表示在物体内部）。</p><p><a href="https://blog.csdn.net/qq_41368247/article/details/106194092">2D基本图形的Sign Distance Function (SDF)详解（上）_T-Jhon的博客-CSDN博客</a></p></li><li><p>水平集(Level Set Methods)</p><p>思想与距离函数一致。类比于地理上的等高线。</p><p><img src="/2021/09/13/GAMES101/image-20210816161446042.png" alt="image-20210816161446042" style="zoom:50%;"></p></li><li><p>分形</p><p>递归地描述几何图形。由于分形的频率较高，可能会引起严重的走样问题。</p></li></ul><p>隐式几何表示对于隐函数的采样（指遍历在表面上的点）可能是困难的，但是判断某个点与几何体的关系是容易的。</p><p>优点：</p><ul><li>易于表述和存储</li><li>易于点与几何体的位置判断</li><li>易于光线和表面的求交</li><li>对于简单的形状，没有采样误差</li></ul><p>缺点：</p><ul><li>难以表述复杂的形状</li></ul><h4 id="显式-Explicit-几何表示"><a href="#显式-Explicit-几何表示" class="headerlink" title="显式(Explicit)几何表示"></a>显式(Explicit)几何表示</h4><p>显示几何通过直接给出所有点或者参数映射（参数方程）的方法给出点的分布。</p><p>e.g. $f: R^2\rightarrow R^3;(u,v)\rightarrow (x,y,z)$</p><p>通过遍历参数可以得到所有点。</p><ul><li><p>点云</p><p>最简单的表示方式。理论上可以表示任何形状的几何，例如扫描的原始数据一般就是点云。通常转换为多边形面。</p></li><li><p>多边形面(Polygon Mesh)</p><p>常见的有四边形面和三角形面。几乎是图形学中应用最广泛的表示。多边形文件格式约定：</p></li></ul><p><img src="/2021/09/13/GAMES101/image-20210816214524332.png" alt="image-20210816214524332"></p><p>v：顶点坐标，vn：材质坐标，vn：法线方向。f:顶点编号/材质编号/法线编号，每一行为一个三角形面。这是一个立方体的定义，由于系统生成，其中存在一些冗余。</p><p>显式几何表述中，采样是容易的，但判断点与几何体的关系可能是困难的。</p><h2 id="Lecture-11-Geometry-2-Curves-and-Surfaces"><a href="#Lecture-11-Geometry-2-Curves-and-Surfaces" class="headerlink" title="Lecture 11 Geometry 2 (Curves and Surfaces)"></a>Lecture 11 Geometry 2 (Curves and Surfaces)</h2><h3 id="贝塞尔曲线Bezier-Curves（显式表述）"><a href="#贝塞尔曲线Bezier-Curves（显式表述）" class="headerlink" title="贝塞尔曲线Bézier Curves（显式表述）"></a>贝塞尔曲线Bézier Curves（显式表述）</h3><p>用一系列的控制点定义曲线。</p><p><img src="/2021/09/13/GAMES101/image-20210816215312970.png" alt="image-20210816215312970"></p><p>曲线起点过p_0，起点的切线方向沿p0p1,终点过p3，终点切线方向沿p2p3。这是一条贝塞尔曲线。系数为3是因为这是三阶贝塞尔曲线。</p><h4 id="de-Casteljau-算法"><a href="#de-Casteljau-算法" class="headerlink" title="de Casteljau 算法"></a>de Casteljau 算法</h4><p>给出一定数量的控制点，画出贝塞尔曲线。</p><p>例如三个控制点可以画出一条<strong>二次贝塞尔曲线</strong>。</p><p><a href="https://www.zhihu.com/question/29565629">怎么理解贝塞尔曲线？ - 知乎 (zhihu.com)</a></p><p>通过递归地插值得到n阶贝塞尔曲线的坐标。</p><p><img src="/2021/09/13/GAMES101/image-20210816221746372.png" alt="image-20210816221746372"></p><p><img src="/2021/09/13/GAMES101/image-20210816221755336.png" alt="image-20210816221755336"></p><p>伯恩斯坦多项式：</p><p><img src="/2021/09/13/GAMES101/image-20210816222018891.png" alt="image-20210816222018891"></p><p>伯恩斯坦多项式系数之和为1（显然）</p><h4 id="贝塞尔曲线的性质"><a href="#贝塞尔曲线的性质" class="headerlink" title="贝塞尔曲线的性质"></a>贝塞尔曲线的性质</h4><p>（以三阶贝塞尔曲线为例）</p><ul><li><p>规定了起点和终点；</p></li><li><p>规定了起点和终点的切线方向；</p></li><li><p>直接对控制点做仿射变换后绘制贝塞尔曲线，和对整个贝塞尔曲线做仿射变换，得到的结果是一致的；</p></li><li><p>只有仿射变换满足上述性质，对于投影变换等其他变换不符合上述性质；</p></li><li><p>凸包性质：贝塞尔曲线上的任何一个点都一定在控制点的凸包内。（例如，一阶贝塞尔曲线为两个控制点连线的线段）</p><p>凸包：平面上有一组点，向最外圈包围橡皮筋，最小的凸多边形即为凸包。</p><p><img src="/2021/09/13/GAMES101/image-20210816223650023.png" alt="image-20210816223650023" style="zoom:25%;"></p></li></ul><h3 id="分段贝塞尔曲线-Piecewise-Bezier-Curves"><a href="#分段贝塞尔曲线-Piecewise-Bezier-Curves" class="headerlink" title="分段贝塞尔曲线 Piecewise Bézier Curves"></a>分段贝塞尔曲线 Piecewise Bézier Curves</h3><p>原因：当贝塞尔曲线阶数较大时，贝塞尔曲线就不够直观。</p><p>通常使用Cubic贝塞尔曲线（三阶，四个控制点），将各个贝塞尔曲线相互连接，形成一条较大的贝塞尔曲线。</p><p>为了美观和易于控制，常常只连接第1-2个控制点、第3-4个控制点。</p><p><img src="/2021/09/13/GAMES101/image-20210816224803484.png" alt="image-20210816224803484"></p><h4 id="分段贝塞尔曲线的连续性"><a href="#分段贝塞尔曲线的连续性" class="headerlink" title="分段贝塞尔曲线的连续性"></a>分段贝塞尔曲线的连续性</h4><p><img src="/2021/09/13/GAMES101/image-20210816224938374.png" alt="image-20210816224938374"></p><p><img src="/2021/09/13/GAMES101/image-20210816225004457.png" alt="image-20210816225004457"></p><p>C1连续要求上一段终点两个控制点连线与下一段起点两个控制点连线共线且等长。</p><p>C2连续为曲率连续。在制造上有时会要求C2连续。</p><h3 id="样条曲线（Spline）"><a href="#样条曲线（Spline）" class="headerlink" title="样条曲线（Spline）"></a>样条曲线（Spline）</h3><p><img src="/2021/09/13/GAMES101/image-20210816225250021.png" alt="image-20210816225250021"></p><h4 id="B-样条曲线-B-Splines"><a href="#B-样条曲线-B-Splines" class="headerlink" title="B-样条曲线 (B-Splines)"></a>B-样条曲线 (B-Splines)</h4><p><img src="/2021/09/13/GAMES101/image-20210816225320444.png" alt="image-20210816225320444"></p><p>贝塞尔曲线没有较好的局部性，一个限制点的移动会引起大范围的变化。而B-样条有较好的局部性。</p><ul><li><p>We do not cover B-splines and NURBS  </p></li><li><p>We also do not cover operations on curves  (e.g. increasing/decreasing orders, etc.)  </p></li><li>To learn more / deeper, you are welcome to refer to  Prof. Shi-Min Hu’s course: <a href="https://www.bilibili.com/video/av66548502">https://www.bilibili.com/video/av66548502</a></li></ul><h3 id="曲面"><a href="#曲面" class="headerlink" title="曲面"></a>曲面</h3><h4 id="贝塞尔曲面"><a href="#贝塞尔曲面" class="headerlink" title="贝塞尔曲面"></a>贝塞尔曲面</h4><p>与分段贝塞尔曲线一致，分段贝塞尔曲面使用4x4的限制点来定义一块曲面</p><p>在两个方向(u, v)上，分别定义贝塞尔曲线。一个方向上的贝塞尔曲线上四个点当作另一防线上贝塞尔曲线的四个控制点。通过参数u，v就可以定义出贝塞尔曲线的每一个点。</p><p><img src="/2021/09/13/GAMES101/image-20210817195841531.png" alt="image-20210817195841531" style="zoom:50%;"></p><p>通过这种方法可以定义非常复杂的模型。</p><h5 id="拼合分段贝塞尔曲面"><a href="#拼合分段贝塞尔曲面" class="headerlink" title="拼合分段贝塞尔曲面"></a>拼合分段贝塞尔曲面</h5><p>保证贝塞尔曲线的连续性。</p><h4 id="几何处理"><a href="#几何处理" class="headerlink" title="几何处理"></a>几何处理</h4><ul><li>网格细分（使用更多的面表示模型）</li><li>网格简化（在保证几何形状的情况下，使用更少的面表示几何体）</li><li>网格正规化（使三角形不会特别尖或长，使得所有三角形面的大小都差不多）</li></ul><h2 id="Lecture-12-Geometry-3"><a href="#Lecture-12-Geometry-3" class="headerlink" title="Lecture 12 Geometry 3"></a>Lecture 12 Geometry 3</h2><h3 id="网格细分-Mesh-Subdivision-Upsampling"><a href="#网格细分-Mesh-Subdivision-Upsampling" class="headerlink" title="网格细分 Mesh Subdivision (Upsampling)"></a>网格细分 Mesh Subdivision (Upsampling)</h3><h4 id="Loop-Subdivision"><a href="#Loop-Subdivision" class="headerlink" title="Loop Subdivision"></a>Loop Subdivision</h4><p>提出者的姓氏是Loop，与“循环”没有关系。</p><p><strong>只适用于三角形面。</strong></p><p>把每个三角形分割为四个三角形（连接每个三角形三边中点）；</p><p>根据权重调整各个三角形顶点的位置。</p><ul><li><p>区分新增的顶点和原有的顶点，这两种顶点分别更新位置，使模型更加光滑。</p><p><img src="/2021/09/13/GAMES101/image-20210817202405680.png" alt="image-20210817202405680" style="zoom:67%;"></p><p><img src="/2021/09/13/GAMES101/image-20210817202421812.png" alt="image-20210817202421812" style="zoom:67%;"></p></li></ul><h4 id="Catmull-Clark-Subdivision-General-Mesh"><a href="#Catmull-Clark-Subdivision-General-Mesh" class="headerlink" title="Catmull-Clark Subdivision (General Mesh)"></a>Catmull-Clark Subdivision (General Mesh)</h4><p>Loop细分只适用于三角形面细分，而Catmull-Clark细分适用于一般的网格（例如四边形和三角形混杂的情形）。</p><p>定义面上的<strong>非四边形面</strong>，定义面上度数不为4的点为<strong>奇异点</strong>。</p><p>细分步骤：</p><ul><li><p>每个边上找出中点，找出每个面的重心点；</p></li><li><p>连接每个面上重心和面上每一条边的中点</p><p>在这一步上，原有的<strong>奇异点仍为奇异点</strong>，在<strong>非四边形面</strong>的重心的点成为<strong>新的奇异点</strong>，并且引入新的奇异点之后不再是非四边形面。</p><p>也就是，在一次Catmull-Clark细分操作之后，所有非四边形面都成为了奇异点，之后奇异点和非四边形面数不再发生变化。</p></li><li><p>更新顶点的位置</p><ul><li>对于面中心的点、对于各边的中点、原有的顶点，应用不同的更新方式:    </li></ul><p><img src="/2021/09/13/GAMES101/image-20210817204057722.png" alt="image-20210817204057722" style="zoom: 67%;"></p></li></ul><p>​    </p><h3 id="网格简化-Mesh-Simplification-Downsampling"><a href="#网格简化-Mesh-Simplification-Downsampling" class="headerlink" title="网格简化 Mesh Simplification (Downsampling)"></a>网格简化 Mesh Simplification (Downsampling)</h3><p>如Mipmap一样，会有不同面数的层次结构，例如一个模型在近处有30000面，而在远处会有3000面。如何实现不同层次结构之间的平滑过渡仍是图形学界待解决的问题。</p><h4 id="边坍缩-Edge-Collapsing"><a href="#边坍缩-Edge-Collapsing" class="headerlink" title="边坍缩 Edge Collapsing"></a>边坍缩 Edge Collapsing</h4><p>通过将两个顶点“捏”在一起，实现面数的缩减。</p><p><img src="/2021/09/13/GAMES101/image-20210818110418474.png" alt="image-20210818110418474"></p><h5 id="二次误差度量-Quadric-Error-Metrics"><a href="#二次误差度量-Quadric-Error-Metrics" class="headerlink" title="二次误差度量 Quadric Error Metrics"></a>二次误差度量 Quadric Error Metrics</h5><p>用于计算一个顶点的“重要程度”，是被保留还是进行坍缩；坍缩后移动顶点的位置，使得坍缩后的图形轮廓与本来的轮廓区别不大。</p><p>二次误差度量思想：新的顶点应该最小化二次距离(L2 distance)的和。假设坍缩每一条边，并将新顶点置于最优的位置。</p><p>问题：在一条边坍缩之后，会引起其他边的变化。解决方案：取最小代价，然后更新其他顶点的值。使用优先队列/堆。</p><p><img src="/2021/09/13/GAMES101/image-20210818112616359.png" alt="image-20210818112616359"></p><h3 id="光栅化的阴影"><a href="#光栅化的阴影" class="headerlink" title="光栅化的阴影"></a>光栅化的阴影</h3><h4 id="Shadow-Mapping"><a href="#Shadow-Mapping" class="headerlink" title="Shadow Mapping"></a>Shadow Mapping</h4><p>使用Shadow Mapping在光栅化中生成阴影。在图像空间中生成阴影，无须知道空间的几何信息，会产生走样现象。</p><p>核心思想：如果某个点<strong>不在</strong>阴影中，说明这个点必须同时被<strong>光源</strong>和<strong>摄像机</strong>看到。</p><p>经典的Shadow Mapping只能处理点光源或方向光源，有明显的阴影边界。这种阴影被称为<strong>硬阴影</strong>。处理步骤为：</p><ul><li>从光源看向场景（假设有一个虚拟摄像机C），记录能看到的所有点的深度，获取深度图D(Shadow Map)，不考虑着色；</li><li>从摄像机看向场景，对于任何一个点P，获取P在C下的深度（即光源与着色点的距离），并与D中记录的该点深度对比。若相同（由于存在浮点数误差、像素点和着色点的粒度差异等数值精度问题，实际操作中可能是判定距离是否大于深度图中的记录加上某一阈值等），说明在C中能看到点P，若不同，说明C中无法看到点P，即P之前有物体遮挡了光线。</li></ul><p><img src="/2021/09/13/GAMES101/image-20210818121126402.png" alt="image-20210818121126402" style="zoom:67%;"></p><p>Shadow Mapping成为当今几乎所有的3D游戏、早期电影中广泛应用的技术。</p><h4 id="Shadow-Mapping的问题"><a href="#Shadow-Mapping的问题" class="headerlink" title="Shadow Mapping的问题"></a>Shadow Mapping的问题</h4><ul><li>需要对整个场景进行两次光栅化，更大的性能开销；</li><li>只能做硬阴影（一个点要么完全被光源可见，要么完全不可见，会产生锐利的阴影边缘）；</li><li>阴影质量取决于阴影图的分辨率；</li><li>涉及浮点数比较等数值误差。</li></ul><h4 id="软阴影"><a href="#软阴影" class="headerlink" title="软阴影"></a>软阴影</h4><p>软阴影为物理上的<strong>半影</strong>，区别于<strong>本影</strong>（完全看不到光源）。</p><p><img src="/2021/09/13/GAMES101/image-20210818123518794.png" alt="image-20210818123518794" style="zoom:67%;"></p><p>取决于物体有多大的范围能看到光源。</p><h3 id="网格正规化-Mesh-Regularization"><a href="#网格正规化-Mesh-Regularization" class="headerlink" title="网格正规化 Mesh Regularization"></a>网格正规化 Mesh Regularization</h3><p>课程中未涉及。</p><h2 id="Lecture-13-Ray-Tracing-1-Whitted-Style-Ray-Tracing"><a href="#Lecture-13-Ray-Tracing-1-Whitted-Style-Ray-Tracing" class="headerlink" title="Lecture 13 Ray Tracing 1 (Whitted-Style Ray Tracing)"></a>Lecture 13 Ray Tracing 1 (Whitted-Style Ray Tracing)</h2><h3 id="为什么要用光线追踪"><a href="#为什么要用光线追踪" class="headerlink" title="为什么要用光线追踪"></a>为什么要用光线追踪</h3><ul><li><p>光栅化无法很好地表现全局的效果：</p><ul><li>软阴影</li><li>Glossy Reflection (存在一部分反射，也有一定的模糊效果，类似毛玻璃)</li><li>间接光照</li></ul><p>等光线<strong>弹射不止一次</strong>的情形。</p></li><li><p>光栅化是一种很快但质量相对较低的技术；</p></li><li>光线追踪是一种很准确，但很慢的技术。<ul><li>光栅化应用于实时渲染</li><li>光线追踪更多地应用于离线渲染。</li></ul></li></ul><h3 id="基础的光线追踪算法"><a href="#基础的光线追踪算法" class="headerlink" title="基础的光线追踪算法"></a>基础的光线追踪算法</h3><p>光线追踪中对光线有以下的假设：</p><ol><li>光线按照直线传播（在物理上并不准确，忽略了其波动性）</li><li>光线不会发生互相碰撞（在物理上并不准确）</li><li>光线从光源发出经过一定的反射等作用进入人的眼睛（光路是可逆的，从眼睛发出光线抵达光源也是有效的光线）</li><li>眼睛/摄像机是一个点</li></ol><h4 id="光线投射-Ray-Casting"><a href="#光线投射-Ray-Casting" class="headerlink" title="光线投射 Ray Casting"></a>光线投射 Ray Casting</h4><ul><li><p>通过从摄像机向每个像素投射一条光线来生成一张图片；</p><p>沿着每根光线，记录光线与模型最近的交点。</p></li><li><p>通过将光线送向光源来检查是否存在阴影。</p><p>连接上一步中光线与模型的交点与光源，若中途无遮挡，则该点能被照亮。</p></li><li><p>进行着色</p></li></ul><h4 id="Whitted-Style-递归光线追踪"><a href="#Whitted-Style-递归光线追踪" class="headerlink" title="Whitted-Style 递归光线追踪"></a>Whitted-Style 递归光线追踪</h4><p><img src="/2021/09/13/GAMES101/image-20210818135731545.png" alt="image-20210818135731545" style="zoom:67%;"></p><p>对光线弹射的每个点都进行着色，依照比例进行叠加，对image plane上的像素进行着色。</p><h4 id="光线方程"><a href="#光线方程" class="headerlink" title="光线方程"></a>光线方程</h4><p>光线r由起点o和方向d定义。</p><script type="math/tex; mode=display">\vec r(t)=\vec o+t\vec d,0\leq t <\infty</script><p>球面p定义：</p><script type="math/tex; mode=display">\vec p:(\vec p-\vec c)^2-R^2=0</script><p>求光线r和球面p的交点：</p><script type="math/tex; mode=display">(\vec o+t\vec d-\vec c)^2-R^2=0</script><p>利用二次方程判别式，通过判断交点数量判断光线和球面的交点。</p><h4 id="光线和隐式表面的求交"><a href="#光线和隐式表面的求交" class="headerlink" title="光线和隐式表面的求交"></a>光线和隐式表面的求交</h4><p>通常的隐式表面p：</p><script type="math/tex; mode=display">\vec p:f(\vec p)=0</script><p>使用数值计算的方法解出t的正实数根，即可求出交点。取每条光线最近的交点。</p><h4 id="光线和显式表面的求交"><a href="#光线和显式表面的求交" class="headerlink" title="光线和显式表面的求交"></a>光线和显式表面的求交</h4><h5 id="朴素算法"><a href="#朴素算法" class="headerlink" title="朴素算法"></a>朴素算法</h5><p>通过光线和三角形的求交，也可以实现inside/outside test。在一个闭曲面内的点向外引射线，一定有奇数个交点。</p><p>三角形一定在某个平面内。因此将光线和三角形求交简化为</p><ul><li>光线和平面求交</li><li>检测交点是否在三角形内</li></ul><p>平面由一条法线N和一个点p’定义：</p><script type="math/tex; mode=display">\vec p:(\vec p-\vec p')\cdot\vec N=0\\ax+by+cz+d=0</script><p>平面方程与光线方程联立，得</p><script type="math/tex; mode=display">t=\frac{(\vec p'-\vec o)\cdot N}{\vec d\cdot \vec N}</script><p>判定t是否$\in[0,\infty)$</p><p>判定交点是否在三角形内</p><h5 id="Moller-Trumbore-Algorithm"><a href="#Moller-Trumbore-Algorithm" class="headerlink" title="Möller Trumbore Algorithm"></a>Möller Trumbore Algorithm</h5><p>使用重心坐标的思想</p><p><img src="/2021/09/13/GAMES101/image-20210818143700544.png" alt="image-20210818143700544" style="zoom:67%;"></p><p>使用Cramer法则求解线性方程组。</p><h3 id="光线追踪的加速"><a href="#光线追踪的加速" class="headerlink" title="光线追踪的加速"></a>光线追踪的加速</h3><p>朴素方法：</p><p>对于场景中所有三角形面，代入光线方程，取每条光线最近的交点。计算量巨大。</p><h4 id="包围盒-1"><a href="#包围盒-1" class="headerlink" title="包围盒"></a>包围盒</h4><p>使用一个简单的几何体包围物体，减少不必要的工作量。</p><h5 id="AABB包围盒"><a href="#AABB包围盒" class="headerlink" title="AABB包围盒"></a>AABB包围盒</h5><p>三维中最常用的包围盒为长方体，它由三组不同的相对平面的交组成。</p><p>short for Axis-Aligned Bounding Box （轴对齐包围盒）</p><p>AABB包围盒一定是横平竖直的，任意一边都和坐标轴平行；</p><h6 id="光线和包围盒求交"><a href="#光线和包围盒求交" class="headerlink" title="光线和包围盒求交"></a>光线和包围盒求交</h6><p>二维情况下：</p><p><img src="/2021/09/13/GAMES101/image-20210818151746481.png" alt="image-20210818151746481" style="zoom:67%;"></p><p><img src="/2021/09/13/GAMES101/image-20210818151803547.png" alt="image-20210818151803547" style="zoom:67%;"></p><p>光线只有进入三组对面后，才进入了包围盒；只要离开任何一组对面，就离开了包围盒。</p><p><img src="/2021/09/13/GAMES101/image-20210818151953609.png" alt="image-20210818151953609" style="zoom:67%;"></p><h6 id="为什么要轴对齐"><a href="#为什么要轴对齐" class="headerlink" title="为什么要轴对齐"></a>为什么要轴对齐</h6><p>简化运算过程：</p><p><img src="/2021/09/13/GAMES101/image-20210818152439404.png" alt="image-20210818152439404" style="zoom:67%;"></p><h2 id="Lecture-14-Ray-Tracing-2-Acceleration-amp-Radiometry"><a href="#Lecture-14-Ray-Tracing-2-Acceleration-amp-Radiometry" class="headerlink" title="Lecture 14 Ray Tracing 2 (Acceleration &amp; Radiometry)"></a>Lecture 14 Ray Tracing 2 (Acceleration &amp; Radiometry)</h2><p>使用AABB加速光线追踪。</p><h3 id="Uniform-Spatial-Partitions-Grids"><a href="#Uniform-Spatial-Partitions-Grids" class="headerlink" title="Uniform Spatial Partitions (Grids)"></a>Uniform Spatial Partitions (Grids)</h3><ol><li>找到一个包围盒</li><li>创建grid</li><li>标记物体占据的格子（区分实心物体和空心物体，空心物体仅标记边缘所占据的格子）</li></ol><p><img src="/2021/09/13/GAMES101/image-20210818154353108.png" alt="image-20210818154353108" style="zoom:67%;"></p><p>如何判断光和哪一个格子有交点：光是朝右上方向传播，那么它下一步经过的格子只可能是右方或者上方或右上方的格子之一，求交点取最近即可（实际算法远比此复杂）。</p><p>格子的分辨率会影响加速效果。太稀疏达不到加速效果，太密则会在检测盒子是否相交时耗费较多性能。通常来说，格子数会划分为<strong>物体数的常数倍</strong>，在三维情形下这个常数常常被设置为27（经验公式）。</p><p>Uniform Grids在均匀分布的大规模物体时效果较好。</p><p>在物体分布不均匀时，例如“运动场中放了一个茶壶”时效果不佳。</p><h3 id="空间划分-Spatial-Partitions"><a href="#空间划分-Spatial-Partitions" class="headerlink" title="空间划分 Spatial Partitions"></a>空间划分 Spatial Partitions</h3><p>解决了上述均匀划分的问题，在物体稀疏时使用更大的格子，在物体较密集时使用更小且密集的格子。</p><p><img src="/2021/09/13/GAMES101/image-20210818155610810.png" alt="image-20210818155610810" style="zoom:67%;"></p><ul><li>Oct-Tree(八叉树，每个节点均匀沿每个轴二分，上述二维情况为四叉树；三维下为八叉)</li><li>KD-Tree(每个节点只沿着轴向进行一次分裂，交替地进行水平划分和竖直划分，实际为二叉树)</li><li>BSP-Tree(对空间进行二分，与KD树的区别在于不一定沿轴向分裂)</li></ul><h4 id="KD-Tree"><a href="#KD-Tree" class="headerlink" title="KD-Tree"></a>KD-Tree</h4><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><p><img src="/2021/09/13/GAMES101/image-20210818162959180.png" alt="image-20210818162959180" style="zoom:67%;"></p><h5 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h5><p>对于任何一个内部节点，需要储存</p><ul><li>沿哪个轴划分: x-, y-, 或z-轴；</li><li>划分位置：沿上一步轴向的哪个方向划分；</li><li>子节点：指向子节点的指针</li><li>内部节点不保存物体信息</li></ul><p>对于任何一个叶子节点：</p><ul><li>物体列表被保存在叶子节点之上。</li></ul><h5 id="使用KD-Tree-加速光线追踪"><a href="#使用KD-Tree-加速光线追踪" class="headerlink" title="使用KD-Tree 加速光线追踪"></a>使用KD-Tree 加速光线追踪</h5><p>遍历KD-Tree，判断光线与某个盒子是否有交点，如果有交点则与该盒子的子节点判断是否相交。直到叶子节点，光线与叶子节点保存的物体进行相交判断。</p><h5 id="KD-Tree的问题"><a href="#KD-Tree的问题" class="headerlink" title="KD-Tree的问题"></a>KD-Tree的问题</h5><ul><li><p>KD-Tree建立进行子节点的划分时，需要判断物体是否与格子相交。这种判断是困难的；</p></li><li><p>一个物体可能存在于多个盒子内，如此一个物体可能出现在多个叶子节点中。</p></li></ul><h3 id="物体划分-Object-Partitions"><a href="#物体划分-Object-Partitions" class="headerlink" title="物体划分 Object Partitions"></a>物体划分 Object Partitions</h3><p>比起空间划分，业界更常使用物体划分。</p><h4 id="Bounding-Volume-Hierarchy-BVH"><a href="#Bounding-Volume-Hierarchy-BVH" class="headerlink" title="Bounding Volume Hierarchy (BVH)"></a>Bounding Volume Hierarchy (BVH)</h4><p>不进行空间的划分，而是对物体进行划分。</p><p><img src="/2021/09/13/GAMES101/image-20210818164313161.png" alt="image-20210818164313161" style="zoom:67%;"></p><h5 id="优势和问题"><a href="#优势和问题" class="headerlink" title="优势和问题"></a>优势和问题</h5><ul><li>避免了空间划分的问题；</li><li>但也可能引起不同的盒的重叠。</li></ul><h5 id="划分策略"><a href="#划分策略" class="headerlink" title="划分策略"></a>划分策略</h5><p>选一个维度进行划分</p><ul><li>技巧1：总是沿着测度最大的维度进行划分，使划分后的单元大小平均；</li><li>技巧2：在居中的物体处进行划分，使二叉树更加平衡（按三角形重心取中位数，使用O(n)的快速选择算法）。</li></ul><p>当节点中的元素数量低于指定值时停止划分。</p><h5 id="数据结构-1"><a href="#数据结构-1" class="headerlink" title="数据结构"></a>数据结构</h5><p>对于任何一个内部节点，需要储存：</p><ul><li>包围盒的轮廓；</li><li>子节点：指向子节点的指针；</li><li>内部节点不保存物体信息</li></ul><p>对于任何一个叶子节点：</p><ul><li>物体列表被保存在叶子节点之上。</li></ul><h5 id="使用BVH加速光线追踪"><a href="#使用BVH加速光线追踪" class="headerlink" title="使用BVH加速光线追踪"></a>使用BVH加速光线追踪</h5><p><img src="/2021/09/13/GAMES101/image-20210818172831704.png" alt="image-20210818172831704" style="zoom:67%;"></p><h3 id="辐射度量学-Basic-Radiometry"><a href="#辐射度量学-Basic-Radiometry" class="headerlink" title="辐射度量学 Basic Radiometry"></a>辐射度量学 Basic Radiometry</h3><p>Blinn-Phong模型存在大量的简化；</p><p>辐射度量学引入了物理上精确的光的作用。</p><p>辐射度量学引入了光的性质(空间上的性质，而非时间性质)，例如Radiant flux, intensity, irradiance, radiance. 在辐射度量学中，仍然以几何光学的方法进行计算。</p><h4 id="Radiant-Energy-and-Flux-Power"><a href="#Radiant-Energy-and-Flux-Power" class="headerlink" title="Radiant Energy and Flux (Power)"></a>Radiant Energy and Flux (Power)</h4><p>Definition: Radiant energy is the energy of electromagnetic radiation. It is measured in units of joules, and denoted by the symbol:</p><script type="math/tex; mode=display">Q\;[\mathrm{J=Joule}]</script><p>Definition: Radiant flux (Radiant power) is the energy emitted, reflected, transmitted or received, per unit time</p><script type="math/tex; mode=display">\Phi\equiv \frac{\mathrm dQ}{\mathrm dt}\;[\mathrm{W=Watt}][\mathrm{lm=lumen}]^*</script><p>光源所发出的光能是向所有方向辐射的，对于在单位时间里通过某一面积的光能，称为通过这一面积的辐射能通量。各色光的频率不同，眼睛对各色光的敏感度也有所不同，即使各色光的辐射能通量相等，在视觉上并不能产生相同的明亮程度，在各色光中，黄、绿色光能激起最大的明亮感觉。如果用绿色光作水准，令它的光通量等于辐射能通量，则对其它色光来说，激起明亮感觉的本领比绿色光为小，光通量也小于辐射能通量。</p><h4 id="Radiant-Intensity"><a href="#Radiant-Intensity" class="headerlink" title="[Radiant] Intensity"></a>[Radiant] Intensity</h4><p>Light emitted from a sourse</p><p>Definition: The radiant (luminous) intensity is the power per unit solid angle (立体角) emitted by a point light source.</p><script type="math/tex; mode=display">I(\omega)\equiv\frac{\mathrm d\Phi}{\mathrm d\omega}\;[\frac{\mathrm W}{\mathrm{sr}}][\frac{\mathrm{lm}}{\mathrm{sr}}=\mathrm{cd}=\mathrm{candela}]</script><p><img src="/2021/09/13/GAMES101/image-20210818222642943.png" alt="image-20210818222642943"></p><p>$\theta、\phi$为球面坐标系下的参数</p><p><img src="/2021/09/13/GAMES101/image-20210818223309131.png" alt="image-20210818223309131"></p><p>说明$\theta、\phi$并不是对球面的均匀的划分。</p><p>$\mathrm d \omega$单位立体角/微分立体角</p><p>使用$\hat\omega$单位向量表示球面上的方向。</p><p>在均匀放出能量的点光源中，</p><script type="math/tex; mode=display">I=\frac{\Phi}{4\pi}</script><h2 id="Lecture-15-Ray-Tracing-3-Light-Transport-amp-Global-Illumination"><a href="#Lecture-15-Ray-Tracing-3-Light-Transport-amp-Global-Illumination" class="headerlink" title="Lecture 15 Ray Tracing 3 (Light Transport &amp; Global Illumination)"></a>Lecture 15 Ray Tracing 3 (Light Transport &amp; Global Illumination)</h2><h3 id="辐射度量学-Cont"><a href="#辐射度量学-Cont" class="headerlink" title="辐射度量学 Cont."></a>辐射度量学 Cont.</h3><h4 id="Irradiance"><a href="#Irradiance" class="headerlink" title="Irradiance"></a>Irradiance</h4><p>Definition: The irradiance is the power per unit area incident on a surface point. </p><script type="math/tex; mode=display">E(\vec x)\equiv\frac{\mathrm d\Phi(\vec x)}{\mathrm d A}\;[\frac{\mathrm W}{\mathrm{m^2}}][\frac{\mathrm{lm}}{\mathrm{m^2}}=\mathrm{lux}]</script><p><img src="/2021/09/13/GAMES101/image-20210818230018083.png" alt="image-20210818230018083"></p><p>注意：只有与接收点垂直的能量才算入，不与接收面积垂直的需要做投影，加入$\cos \theta$项。</p><h4 id="Radiance"><a href="#Radiance" class="headerlink" title="Radiance"></a>Radiance</h4><p>Radiance is the fundamental field quantity that describes the  distribution of light in an environment.</p><ul><li>Radiance is the quantity associated with a ray.</li><li>Rendering is all about computing radiance</li></ul><p>Definition: The radiance (luminance) is the power emitted,  reflected, transmitted or received by a surface, per unit solid  angle, per projected unit area.</p><p><img src="/2021/09/13/GAMES101/image-20210818233926432.png" alt="image-20210818233926432"></p><p>Recall </p><ul><li><p>Irradiance: power per projected unit area  </p></li><li><p>Intensity: power per solid angle  </p></li></ul><p>So  </p><ul><li><p>Radiance: Irradiance per solid angle </p><script type="math/tex; mode=display">L(p,\omega)=\frac{\mathrm d E(p)}{\mathrm d \omega\cos\theta}</script></li><li><p>Radiance: Intensity per projected unit area</p><script type="math/tex; mode=display">L(p,\omega)\frac{\mathrm d I(p,\omega)}{\mathrm d A\cos\theta}</script></li></ul><p><img src="/2021/09/13/GAMES101/image-20210819000347242.png" alt="image-20210819000347242"></p><p>Radiance 是在 Iradiance 上加上方向。</p><p>使用半球，是因为如果从下方入射，则不可能产生反射。</p><h3 id="双向反射分布函数-Bidirectional-Reflectance-Distribution-Function-BRDF"><a href="#双向反射分布函数-Bidirectional-Reflectance-Distribution-Function-BRDF" class="headerlink" title="双向反射分布函数 Bidirectional Reflectance  Distribution Function  (BRDF)"></a>双向反射分布函数 Bidirectional Reflectance  Distribution Function  (BRDF)</h3><p><a href="https://zhuanlan.zhihu.com/p/21376124">基于物理着色：BRDF - 知乎 (zhihu.com)</a></p><p>反射的理解：光照射到物体表面，被物体吸收后重新发射出来。</p><p><img src="/2021/09/13/GAMES101/image-20210819003523642.png" alt="image-20210819003523642"></p><p>BRDF定义了不同的材质。</p><h3 id="反射方程-The-Reflection-Equation"><a href="#反射方程-The-Reflection-Equation" class="headerlink" title="反射方程 The Reflection Equation"></a>反射方程 The Reflection Equation</h3><p>对于给定的着色点和观测方向/出射方向$L_r$，积分全空间的光线来源/入射方向$L_i$(光线传播的线性性质)，可以得到最终的渲染结果</p><p><img src="/2021/09/13/GAMES101/image-20210819004119769.png" alt="image-20210819004119769"></p><p>其中</p><script type="math/tex; mode=display">\int_{H^2}L_i(\mathrm p,\omega_i)\cos\theta\mathrm d\omega_i=E(\mathrm p)</script><p>也就是，关于radiance的积分为该点处的irradiance，两种计算方式都可以得出正确的结果。</p><p>使用半球，是因为如果从下方入射，则不可能产生反射。</p><h4 id="困难"><a href="#困难" class="headerlink" title="困难"></a>困难</h4><p>出射的radiance可能作为自身入射的radiance，由此产生递归。</p><p><img src="/2021/09/13/GAMES101/image-20210819004518286.png" alt="image-20210819004518286"></p><h3 id="渲染方程-绘制方程-The-Randering-Equation"><a href="#渲染方程-绘制方程-The-Randering-Equation" class="headerlink" title="渲染方程/绘制方程 The Randering Equation"></a>渲染方程/绘制方程 The Randering Equation</h3><script type="math/tex; mode=display">L_o=L_e(\mathrm p,\omega)+\int_{\Omega^+}L_i(\mathrm p,\omega_i)f_r(\mathrm p,\vec\omega_i,\vec\omega_o)(\vec n\cdot\omega_i)\mathrm d\omega_i</script><p>其中$\Omega^+=H^2$，指半球面。使用半球，是因为如果从下方入射，则不可能产生反射。</p><p>$L_e$为材质自发光的系数。</p><p>假设上述的所有向量方向都朝外。例如，即使是$\omega_i$，也使用沿物体表面指向光源的方向。</p><p>渲染方程：每个点辐射出的Radiance依赖于其他点辐射出的Radiance。</p><p>渲染方程是一个第二类Fredholm积分方程。</p><p>待看：算子法解微分方程和积分方程</p><p>下面部分暂时看不懂，待补充数学知识后补习。</p><p><img src="/2021/09/13/GAMES101/image-20210819011751972.png" alt="image-20210819011751972"></p><p><img src="/2021/09/13/GAMES101/image-20210819011757713.png" alt="image-20210819011757713"></p><p><img src="/2021/09/13/GAMES101/image-20210819011803233.png" alt="image-20210819011803233"></p><p><img src="/2021/09/13/GAMES101/image-20210819011812807.png" alt="image-20210819011812807"></p><p><img src="/2021/09/13/GAMES101/image-20210819011820116.png" alt="image-20210819011820116"></p><p>零阶项为光源的光照；</p><p>一阶项表明，反射也是一种间接光照。</p><p>L/全局光照会收敛到某一个亮度。</p><h3 id="概率论回顾"><a href="#概率论回顾" class="headerlink" title="概率论回顾"></a>概率论回顾</h3><p>概率、期望、概率分布函数、连续变量的期望</p><h2 id="Lecture-16-Ray-Tracing-4-Monte-Carlo-Path-Tracing"><a href="#Lecture-16-Ray-Tracing-4-Monte-Carlo-Path-Tracing" class="headerlink" title="Lecture 16 Ray Tracing 4 (Monte Carlo Path Tracing)"></a>Lecture 16 Ray Tracing 4 (Monte Carlo Path Tracing)</h2><h3 id="蒙特卡罗法解定积分"><a href="#蒙特卡罗法解定积分" class="headerlink" title="蒙特卡罗法解定积分"></a>蒙特卡罗法解定积分</h3><script type="math/tex; mode=display">\int f(x)\mathrm{d}x=\frac{1}{N}\sum_{i=1}^N\frac{f(X_i)}{p(X_i)}\;X_i\sim p(x)</script><ul><li>采样频率越高(N越大)，误差越小</li></ul><h3 id="路径追踪"><a href="#路径追踪" class="headerlink" title="路径追踪"></a>路径追踪</h3><h4 id="Whitted-style-光线追踪"><a href="#Whitted-style-光线追踪" class="headerlink" title="Whitted-style 光线追踪"></a>Whitted-style 光线追踪</h4><ul><li>总是在镜面反射/折射的物体上进行</li><li>在漫反射物体上停止反射</li></ul><p>这些假设是不准确的，光只有镜面反射、漫反射两种类型，不存在glossy（例如磨砂金属）类型的反射、漫反射的物体之间的反射也被忽略了。</p><h3 id="路径追踪-1"><a href="#路径追踪-1" class="headerlink" title="路径追踪"></a>路径追踪</h3><p>路径追踪=光线追踪+蒙特卡洛方法</p><p>渲染方程是正确的，但是不能正确地处理漫反射等情形。</p><h4 id="蒙特卡洛方法解直接光照"><a href="#蒙特卡洛方法解直接光照" class="headerlink" title="蒙特卡洛方法解直接光照"></a>蒙特卡洛方法解直接光照</h4><p><img src="/2021/09/13/GAMES101/image-20210820195021289.png" alt="image-20210820195021289"></p><h4 id="引入全局光照"><a href="#引入全局光照" class="headerlink" title="引入全局光照"></a>引入全局光照</h4><p>加入来自另一个物体的光照：</p><p><img src="/2021/09/13/GAMES101/image-20210820201200532.png" alt="image-20210820201200532"></p><p><img src="/2021/09/13/GAMES101/image-20210820201744606.png" alt="image-20210820201744606"></p><p><img src="/2021/09/13/GAMES101/image-20210820201717308.png" alt="image-20210820201717308"></p><p>N=1解决了数量爆炸的问题，但是造成的结果噪声非常大。</p><p>对每个像素进行多次路径追踪，降低噪声。</p><p><img src="/2021/09/13/GAMES101/image-20210820202640292.png" alt="image-20210820202640292"></p><p>问题：递归没有终止。</p><p>限定光的反射次数会产生问题：整体能量不守恒。</p><h4 id="俄罗斯轮盘赌算法（RR）"><a href="#俄罗斯轮盘赌算法（RR）" class="headerlink" title="俄罗斯轮盘赌算法（RR）"></a>俄罗斯轮盘赌算法（RR）</h4><p>引入俄罗斯轮盘赌算法(Russian Roulette, RR)，以一定的概率P继续进行递归，返回值除以P，以1-p的概率返回0。通过这种方式，返回值的期望不变。</p><h4 id="对光源进行采样"><a href="#对光源进行采样" class="headerlink" title="对光源进行采样"></a>对光源进行采样</h4><p>这样，就得到了一个正确的路径追踪算法。但是这个算法的效率并不很高。</p><p>因为光线要在一次路径追踪中击中光源，才能最终得到非零结果，因此光线中会存在大量未击中光源的光线，会造成效率的下降。如果采样率较低的话，这些光线中最终抵达光源的光线会变少，造成整体效果不佳。如果可以直接对光源区域进行采样，在采样率降低的情况下也能得到令人满意的效果。</p><p>因为蒙特卡洛方法的分布是可以自定义的，可以通过调整分布函数，使得光线都分布在光源的表面上。</p><p>蒙特卡洛要求采样区间和积分区间一致，因此如果想要对光源的面积A进行采样，就需要对渲染方程进行调整，由对半球面的立体角$\mathrm d \omega$换元为$\mathrm d A$</p><p><img src="/2021/09/13/GAMES101/image-20210820204956228.png" alt="image-20210820204956228">按照立体角定义，将$\mathrm dA$转向与轴向垂直的方向，然后除以到半径距离的平方。</p><p>现在，将一个点的光照分为以下两部分：</p><ul><li>直接来自光源的光照</li><li>来自其他物体的光照</li></ul><p><img src="/2021/09/13/GAMES101/image-20210820205154100.png" alt="image-20210820205154100"></p><h4 id="路径追踪的点光源"><a href="#路径追踪的点光源" class="headerlink" title="路径追踪的点光源"></a>路径追踪的点光源</h4><p>非常难以处理，一般使用较小的面光源实现。</p><h3 id="光线追踪：早期和现代概念"><a href="#光线追踪：早期和现代概念" class="headerlink" title="光线追踪：早期和现代概念"></a>光线追踪：早期和现代概念</h3><ul><li>早期概念<ul><li>光线追踪==Whitted-style ray tracing</li></ul></li><li>现代概念<ul><li>光线传播的整体概念，包括</li><li>(Unidirectional &amp; bidirectional) path tracing </li><li>Photon mapping</li><li>Metropolis light transport</li><li>VCM / UPBP</li></ul></li></ul><h3 id="其他概念"><a href="#其他概念" class="headerlink" title="其他概念"></a>其他概念</h3><h4 id="如何对一个函数进行采样"><a href="#如何对一个函数进行采样" class="headerlink" title="如何对一个函数进行采样"></a>如何对一个函数进行采样</h4><p>sampling</p><p>如何在半球、面积、或更一般的函数上进行采样</p><h4 id="如何选择蒙特卡洛算法的最好的分布"><a href="#如何选择蒙特卡洛算法的最好的分布" class="headerlink" title="如何选择蒙特卡洛算法的最好的分布"></a>如何选择蒙特卡洛算法的最好的分布</h4><p>重要性采样 importance sampling</p><h4 id="产生质量足够好的随机数"><a href="#产生质量足够好的随机数" class="headerlink" title="产生质量足够好的随机数"></a>产生质量足够好的随机数</h4><p>low discrepancy sequences</p><h4 id="将对半球进行采样和对光源进行采样结合起来"><a href="#将对半球进行采样和对光源进行采样结合起来" class="headerlink" title="将对半球进行采样和对光源进行采样结合起来"></a>将对半球进行采样和对光源进行采样结合起来</h4><p>把不同的采样结果结合，是multiple importance sampling(MIP)</p><h4 id="像素不同位置的radiance需要加权吗"><a href="#像素不同位置的radiance需要加权吗" class="headerlink" title="像素不同位置的radiance需要加权吗"></a>像素不同位置的radiance需要加权吗</h4><p>Pixel reconstruction filter解决这个问题</p><h4 id="Radiance-代表像素的颜色吗"><a href="#Radiance-代表像素的颜色吗" class="headerlink" title="Radiance 代表像素的颜色吗"></a>Radiance 代表像素的颜色吗</h4><p>No. 需要经过Gamma校正。还需要了解Curves, color space</p><h2 id="Lecture-17-Materials-and-Appearances"><a href="#Lecture-17-Materials-and-Appearances" class="headerlink" title="Lecture 17 Materials and Appearances"></a>Lecture 17 Materials and Appearances</h2><p>材质描述了光线如何与物体发生作用。</p><p>即使是当下最高级的渲染器，也只能渲染出数十种材质。非物理的方法</p><h3 id="材质-BRDF"><a href="#材质-BRDF" class="headerlink" title="材质==BRDF"></a>材质==BRDF</h3><h4 id="漫反射系数"><a href="#漫反射系数" class="headerlink" title="漫反射系数"></a>漫反射系数</h4><p>假设一个点接收的入射光是均匀的，并且不吸收光，那么根据能量守恒，这个点入射的radiance $L_i$和出射的radiance $L_o$是相等的。</p><p>由于漫反射，这个点的BRDF$f_r$也是一个常数。因此，有$L_o=L_i$</p><script type="math/tex; mode=display">L_o=\int_{H^2}f_rL_i\cos\theta_i\mathrm d\omega_i\\=f_rL_i\int_{H^2}\cos\theta_i\mathrm d\omega_i\\=\pi f_rL_i</script><p>对半球上的$\cos \theta$的积分为$\pi$</p><p>由于$L_o=L_i$，可以得到$f_r=\frac{1}{\pi}$</p><p>可以定义反射率albedo $\rho \in[0,1]$，如此就有了漫反射系数</p><script type="math/tex; mode=display">f_r=\frac{\rho}{\pi}\in[0,\frac{1}{\pi}]</script><h4 id="Glossy-材质"><a href="#Glossy-材质" class="headerlink" title="Glossy 材质"></a>Glossy 材质</h4><p><img src="/2021/09/13/GAMES101/image-20210820214716230.png" alt="image-20210820214716230"></p><h4 id="理想反射-折射材料"><a href="#理想反射-折射材料" class="headerlink" title="理想反射/折射材料"></a>理想反射/折射材料</h4>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;GAMES101的笔记&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://www.sukidayo.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>2020贵软自无转系面试题汇总</title>
    <link href="http://www.sukidayo.top/2020/08/24/2020%E8%B4%B5%E8%BD%AF%E8%87%AA%E6%97%A0%E8%BD%AC%E7%B3%BB%E9%9D%A2%E8%AF%95%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    <id>http://www.sukidayo.top/2020/08/24/2020%E8%B4%B5%E8%BD%AF%E8%87%AA%E6%97%A0%E8%BD%AC%E7%B3%BB%E9%9D%A2%E8%AF%95%E9%A2%98%E6%B1%87%E6%80%BB/</id>
    <published>2020-08-24T13:07:08.000Z</published>
    <updated>2020-08-24T13:07:52.041Z</updated>
    
    <content type="html"><![CDATA[<p>之前发的公众号被电子系约谈删掉了，这边发一份留档。</p><span id="more"></span><h2 id="软院-共20问卷"><a href="#软院-共20问卷" class="headerlink" title="软院 共20问卷"></a>软院 共20问卷</h2><p>被提问问题个数：</p><div class="table-container"><table><thead><tr><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>5+</th></tr></thead><tbody><tr><td>3</td><td>2</td><td>4</td><td>2</td><td>2</td><td>6</td></tr></tbody></table></div><p>其中八字班被提问的问题个数平均少于九字班2个左右</p><h3 id="被提问的“与简历相关的问题”（占比38-）"><a href="#被提问的“与简历相关的问题”（占比38-）" class="headerlink" title="被提问的“与简历相关的问题”（占比38%）"></a>被提问的“与简历相关的问题”（占比38%）</h3><p>如何理解软件的“可完美性”</p><p>程设课程讲了哪些内容，大作业是什么想法</p><p>选了哪些软院的课程？课程的老师分别是？</p><p>字符串匹配算法有哪些？</p><p>KMP算法的实现和复杂度？</p><p>快排和归并排序的实现和复杂度？</p><p>大整数乘法如何实现？</p><p>软件测试的方法？</p><p>了解堆排吗？</p><p>java内存管理机制？</p><p>Seam carving的核心思想和具体实现</p><p>怎么判断一个点是否在多边形内</p><p>知道快速排序吗</p><p>单页面应用后端开发语言；简要介绍同构渲染</p><p>数据库连接池的实现</p><p>强弱类型编程语言之间的区别</p><p>是不是编程零基础</p><p>为什么零基础就选了c++（面对对象）</p><p>材料中提到的智能衣柜有什么功能</p><p>原专业与软件的区别与联系</p><p>快速排序和归并排序的区别</p><p>你知道哪些排序</p><p>你的Java为什么退掉了</p><p>数学/程设/体育成绩为什么不好</p><h3 id="被提问的“与选修课程相关”的问题（24-）"><a href="#被提问的“与选修课程相关”的问题（24-）" class="headerlink" title="被提问的“与选修课程相关”的问题（24%）"></a>被提问的“与选修课程相关”的问题（24%）</h3><p>集合论公理系统的内容是什么</p><p>上学期离散1的若干知识</p><p>你知道哪些排序算法？</p><p>离散数学1中ZFC公理系统中有哪些公理？</p><p>离散/算法课老师是谁</p><p>逻辑公理系统常见种类</p><p>集合论公理系统</p><p>如何将一个字符串倒序输出</p><p>如何求1000以内素数</p><p>为什么要在命题逻辑基础上学习谓词逻辑</p><p>你还记得什么公理系统吗</p><p>比较动态规划和分治</p><p>你所修的计程设和程设有什么区别</p><p>OOP是哪个老师的课</p><h3 id="其中被提到的课程按出现次序排序，依次为"><a href="#其中被提到的课程按出现次序排序，依次为" class="headerlink" title="其中被提到的课程按出现次序排序，依次为"></a>其中被提到的课程按出现次序排序，依次为</h3><p>离散数学1、程序设计基础/OOP、体育</p><h3 id="被提问的其他问题"><a href="#被提问的其他问题" class="headerlink" title="被提问的其他问题"></a>被提问的其他问题</h3><p>如何减少代码中的bug</p><p>如何求最短路</p><p>最优美的数据结构是什么</p><p>为什么没有社工</p><p>专业相关内容（排序算法，时间复杂度等）</p><p>未来的规划是什么？</p><p>是否接受降转？</p><p>快速排序的时间复杂度和空间复杂度</p><p>有没有编过比较复杂的C或者C++程序？</p><p>如果来软件学院以后有什么规划？</p><p>知道快速排序谁发明的吗</p><p>知道异或和或的区别吗</p><p>如果能进入软院，未来有打算从事的方向吗</p><p>单元测试以外的程序除错方法</p><p>如果转过来了，以后想做什么工作</p><p>当地高考分数线</p><p>做过什么相关项目或大作业</p><p>转出系是否有名额</p><p>你是否接受降转</p><p>决定降转还是平转</p><p>上的软院的课程？</p><p>如果转来软院，差的课程较多，怎么处理？</p><p>你现在专业好像也很难进，可以把软件作为二学位啊</p><hr><h2 id="电子-共13问卷"><a href="#电子-共13问卷" class="headerlink" title="电子 共13问卷"></a>电子 共13问卷</h2><p>被提问的问题个数：</p><div class="table-container"><table><thead><tr><th>1</th><th>2</th><th>3</th><th>4</th></tr></thead><tbody><tr><td>1</td><td>2</td><td>8</td><td>2</td></tr></tbody></table></div><h3 id="被提问的“与简历相关的问题”（54-）"><a href="#被提问的“与简历相关的问题”（54-）" class="headerlink" title="被提问的“与简历相关的问题”（54%）"></a>被提问的“与简历相关的问题”（54%）</h3><p>选了哪些课</p><p>上过map了，对电子有什么理解吗</p><p>高考XX（原院系）是你的第一志愿吗？</p><p>你说你参加了电子系的SRT，能不能具体讲一讲是做哪方面工作</p><p>去年你就申请转电子系，最后为什么没来呢（答案：被卡了）</p><p>我看你这边也不差什么课，过来衔接应该没什么问题</p><p>对电子系的了解</p><p>有没有选过电子的课？对电子的了解？</p><p>5G是什么？</p><p>你高考填了电子的志愿吗？第几？</p><p>你说你学过MAP课，那你对电子的课程和教学有什么感受？</p><p>你的补课计划？</p><p>是否选修了电子系的课程？</p><p>自述里没有提到社工，可以介绍一下吗？</p><p>对自述里提及的感兴趣的专业方向有何看法？<br>以后感兴趣的方向<br>如何平衡社工和学习之间的关系<br>今年转系还会不会被原院系卡<br>谈谈对map课的感受及未来计划的研究方向<br>简述SRT相关情况</p><h3 id="被提问的“与选修课程相关”的问题（占比13-）"><a href="#被提问的“与选修课程相关”的问题（占比13-）" class="headerlink" title="被提问的“与选修课程相关”的问题（占比13%）"></a>被提问的“与选修课程相关”的问题（占比13%）</h3><p>对精仪系的理解（来自机械专业）<br>既然你上了电电课，最让你有感触的地方是什么地方，你觉得有什么应用呢？<br>对电子信息的认识<br>map认识<br>觉得修过的电子系的哪门课中的哪部分最有意思</p><h3 id="其中被提到的课程按出现次序排序，依次为-1"><a href="#其中被提到的课程按出现次序排序，依次为-1" class="headerlink" title="其中被提到的课程按出现次序排序，依次为"></a>其中被提到的课程按出现次序排序，依次为</h3><p>MAP，电电</p><h3 id="被提问的其他问题（32-）"><a href="#被提问的其他问题（32-）" class="headerlink" title="被提问的其他问题（32%）"></a>被提问的其他问题（32%）</h3><p>未来想发展什么方向？<br>继续问SRT的相关细节<br>电子系前沿研究有什么<br>高考第一志愿是什么<br>大一上修了多少学分？学得最不满意的一门课是什么？<br>未来想从事电子行业哪些方面的研究？<br>你感兴趣的方向？<br>你选了电子系哪些课<br>你来自精仪系，它和电子关系很大，简述区别与联系？<br>体育爱好<br>对电子信息领域未来发展前景的看法<br>你对转入专业做了哪些先修准备</p><hr><h2 id="贵系-共11问卷"><a href="#贵系-共11问卷" class="headerlink" title="贵系 共11问卷"></a>贵系 共11问卷</h2><p>被提问的问题个数：</p><div class="table-container"><table><thead><tr><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>6</td><td>1</td><td>2</td></tr></tbody></table></div><h3 id="被提问的“与简历相关的问题”（28-）"><a href="#被提问的“与简历相关的问题”（28-）" class="headerlink" title="被提问的“与简历相关的问题”（28%）"></a>被提问的“与简历相关的问题”（28%）</h3><p>你认为游戏中的艺术应该是怎样的？<br>为什么不学化学来计算机<br>为什么高考（一志愿）选了xx系<br>如何证明你有抗压能力<br>你很长一段时间里一直为进入计算机系努力，如果今天你没有通过面试，你会怎么办<br>在科研项目中的具体工作与当前进展？<br>在人工智能挑战赛中做的具体工作？<br>体验最好的一次编程项目？<br>提到的大作业是小组完成的还是个人完成的？你负责的内容是什么？<br>SRT项目</p><h3 id="被提问的“与选修课程相关”的问题（17-）"><a href="#被提问的“与选修课程相关”的问题（17-）" class="headerlink" title="被提问的“与选修课程相关”的问题（17%）"></a>被提问的“与选修课程相关”的问题（17%）</h3><p>你为什么上了两门程序设计课程？<br>选的课是否都是贵系的，会不会感觉难<br>邓公：你在写作与沟通课程上写的长文内容是什么<br>离散数学成绩不佳的原因是什么？<br>程序设计成绩<br>成绩单中的W是什么</p><h3 id="其中被提到的课程按出现次序排序，依次为-2"><a href="#其中被提到的课程按出现次序排序，依次为-2" class="headerlink" title="其中被提到的课程按出现次序排序，依次为"></a>其中被提到的课程按出现次序排序，依次为</h3><p>程设/OOP，离散数学1，写沟</p><h3 id="被提问的其他问题（54-）"><a href="#被提问的其他问题（54-）" class="headerlink" title="被提问的其他问题（54%）"></a>被提问的其他问题（54%）</h3><p>你们系和大类一共多少人？<br>你上学期的绩点排名是多少？<br>你的体育为什么只有C+？<br>你是哪个中学的？<br>你有什么兴趣？<br>你觉得哪边的程设更好？<br>你看过什么有关CS的书（大概这个意思）<br>是否这学期有按贵系培养方案选课<br>你选的计程设不是贵系的程设你知道吧<br>是否担任班内职务或参加社工<br>参加了哪些社团<br>是不是oi选手<br>体育为什么差<br>说一下你的性格<br>你当过班干部吗<br>你的三围（整理者注：指成绩）<br>你选修的“飞天的奥秘”课程是讲什么的？（一门新生研讨课）<br>对计算机哪个领域感兴趣<br>参加的SRT是干什么的？你在里面具体负责什么内容？</p><hr><h2 id="自动化-22问卷"><a href="#自动化-22问卷" class="headerlink" title="自动化 22问卷"></a>自动化 22问卷</h2><p>被提问问题个数：</p><div class="table-container"><table><thead><tr><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th></tr></thead><tbody><tr><td>0</td><td>1</td><td>9</td><td>7</td><td>5</td></tr></tbody></table></div><h3 id="被提问的“与简历相关的问题”（15-）"><a href="#被提问的“与简历相关的问题”（15-）" class="headerlink" title="被提问的“与简历相关的问题”（15%）"></a>被提问的“与简历相关的问题”（15%）</h3><p>英语<br>为什么转自动化不转电子计算机<br>用英文介绍芯动计划智能车大赛<br>年级排名的总人数<br>程设学了什么内容<br>用英语说一下你在高研做的项目？你们实现了什么功能？（我的高中项目）<br>英语提问：对自动化最感兴趣的课程<br>排名是在什么范围内排的<br>你的排名第一是指必限还是必限任？<br>用English描述you曾经参加过的most successful科创competition<br>英语问兴趣爱好<br>大一为什么没有选择转系</p><h3 id="被提问的“与选修课程相关”的问题（31-）"><a href="#被提问的“与选修课程相关”的问题（31-）" class="headerlink" title="被提问的“与选修课程相关”的问题（31%）"></a>被提问的“与选修课程相关”的问题（31%）</h3><p>微积分<br>strlen函数<br>非负函数积分为0是否恒为0<br>数组指针和指针数组分别是什么<br>相似矩阵的定义？相似矩阵的特征值一样吗？相似矩阵的秩一样吗？<br>几何重数和代数重数的定义及关系<br>chars[5]=”abc”中，sizeof和strlen的区别（整理者注：这一问题出现了3次）<br>阐述对特征值、特征向量的理解及其几何意义<br>程设（整理者注：这一问题出现了5次）<br>程设关于宏定义的填空题<br>以下哪些矩阵转置后不变<br>线性代数题<br>线代相关题目<br>C++<br>线代题<br>微积分求极限（整理者注：这一问题出现了2次）<br>程序题回答结果<br>转置矩阵的性质<br>浮点数如何与零值做比较]</p><h3 id="其中被提到的课程按出现次序排序，依次为-3"><a href="#其中被提到的课程按出现次序排序，依次为-3" class="headerlink" title="其中被提到的课程按出现次序排序，依次为"></a>其中被提到的课程按出现次序排序，依次为</h3><p>程设、线代、微积分</p><h3 id="被提问的其他问题（54-）-1"><a href="#被提问的其他问题（54-）-1" class="headerlink" title="被提问的其他问题（54%）"></a>被提问的其他问题（54%）</h3><p>英文对话<br>微积分绩点低的原因<br>上学期排名？院系有多少人？（整理者注：这一问题出现了9次）<br>数学求极限<br>程设关于动静态的问题<br>“What‘’s your favorite sport?describe it.”<br>大一修过程设吗？是哪个系的程设课<br>关于define宏定义的简单计算<br>如何在子函数中修改主函数中设的变量<br>一个微积分求极限的题（直接就可以看出结果那种）<br>你毕业之后的计划（英文）<br>怎样将8进制转成16进制<br>线代的选择题（很基础）<br>递归和非递归程序的特点，什么时候用哪种？<br>线代，判断等式是否成立（简单的）<br>英语：你希望的将来的发展方向？<br>平转还是降转？<br>线性代数基础知识<br>矩阵正定相关概念和问题<br>英语介绍家乡<br>C程序结果<br>微积分选择题<br>英语：毕业后打算<br>英语相关问题<br>微积分相关问题<br>数学编程题<br>C语言（整理者注：这一问题出现了4次）<br>mollac函数相关问题<br>线代相关问题</p><hr><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>​        感谢<strong>EF、TCLYX、Zxmw、hqy、panda2134、panda2134、reder、xzy、zz、刘思睿、刘思睿、匿名人、双木、张后斌、朱江宁、阿憨、LL、hcc、lyp、rand、seasky、一叶、丢丢、大一被卡的精无人、宗孝存、百带小鬼、wfj、yydx、智、最后8min软跳贵选手、老子、BUILDER、Frank、ZRZ、ZYbo、k、zy、小W、已经凉凉的小黄狗、时清扬、狐狸、纪奕姝、邱宝、陈浩</strong>，以及匿名提交的所有人。</p><p>​        感谢贵系<strong>rls</strong>提供的实时数据(<del>rlstql</del>)，以及<strong>王冠</strong>同学（<a href="https://www.zhihu.com/question/384526280/answer/1208811649">知乎链接</a>）绘制的曲线图。</p><p>​        祝诸君武运昌隆。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前发的公众号被电子系约谈删掉了，这边发一份留档。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>前端学习小记</title>
    <link href="http://www.sukidayo.top/2020/08/24/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E5%B0%8F%E8%AE%B0/"/>
    <id>http://www.sukidayo.top/2020/08/24/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E5%B0%8F%E8%AE%B0/</id>
    <published>2020-08-24T13:04:02.000Z</published>
    <updated>2020-08-24T13:05:21.083Z</updated>
    
    <content type="html"><![CDATA[<p>写完大作业就写x</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;写完大作业就写x&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="front-end" scheme="http://www.sukidayo.top/categories/front-end/"/>
    
    
      <category term="前端" scheme="http://www.sukidayo.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>随笔 | 降转这一年</title>
    <link href="http://www.sukidayo.top/2020/06/01/%E9%9A%8F%E7%AC%94%20%E9%99%8D%E8%BD%AC%E8%BF%99%E4%B8%80%E5%B9%B4/"/>
    <id>http://www.sukidayo.top/2020/06/01/%E9%9A%8F%E7%AC%94%20%E9%99%8D%E8%BD%AC%E8%BF%99%E4%B8%80%E5%B9%B4/</id>
    <published>2020-05-31T16:00:00.000Z</published>
    <updated>2020-08-24T13:02:46.920Z</updated>
    
    <content type="html"><![CDATA[<h3 id="随笔-降转这一年"><a href="#随笔-降转这一年" class="headerlink" title="随笔 | 降转这一年"></a>随笔 | 降转这一年</h3><p><code>注：这篇文章充斥着大量神志不清、模糊、中二和鸡血，请慎重阅读。懒得插图了，就这样吧。</code></p><p>又一年转系季。一觉醒来看到群中999+消息，我恍若回到了一年前握着文件夹踏入东主楼的那个下午——虽然那已经是一整年前的事情了。</p><span id="more"></span><h5 id="1-我想做游戏"><a href="#1-我想做游戏" class="headerlink" title="#1 我想做游戏"></a>#1 我想做游戏</h5><blockquote><p>“那时我们有梦，关于文学，关于爱情，关于穿越世界的旅行。”</p></blockquote><p>做一下自我介绍，我在18年入学，分数低于录取分数线3分，领军计划，无竞赛基础。</p><p>很久很久以前，我就对计算机有了一些兴趣，这份兴趣来自小学订阅的电脑杂志（虽然是为了附带光盘里的小游戏）、偷偷借自同学的PSP、或者是小时候爸爸带我一起玩的超级玛丽和魂斗罗。作为一个玩游戏长大的小朋友，我在某个时刻产生了“做属于自己的游戏”的想法——一直持续至今。</p><p>依据高考之前我粗浅的认识，想做游戏，在大学要么就去学码要么就去学美术。但美术是不可能美术的，手残这辈子都画不出像样的画的（我错了今年考完试就学），于是华大学的软件学院成为了我的目标，考不上的话北大也可以。</p><p>但高考数学错的两道选填显然不允许我这么做。裸分不上线的考生自然是没什么人权的，招生组也不会倾泻多少无意义的热情。“你的分数填计算机大类没什么希望，想填就填吧。”我记得出分后与招生组的这段对话。</p><p>于是，我自然却有点意外地被二志愿电子信息录取。从后来与他人的闲谈中得知，线下能录入电子信息类是非常罕见的事情，而电子系与软院的接近给了转系的优势。现在想来，我依然感谢命运那时赐予我的次优解。</p><h5 id="2-我和我的第一个大一"><a href="#2-我和我的第一个大一" class="headerlink" title="#2 我和我的第一个大一"></a>#2 我和我的第一个大一</h5><blockquote><p>“如今我们深夜饮酒，杯子碰到一起，都是梦破碎的声音。”</p></blockquote><p>以下文字完全摘自我在去年生日之际写的总结：</p><p><em>我不愿把我的第一个大一定义成「失败」的，但回想起来，除了与室友好友相处的短暂美好时光，三百余日的经历中竟一时难以找出可称为「闪光」的节点。我讨厌运算放大器、讨厌反射系数和动态电路、讨厌二学位申请记录里「未通过」三个字、也讨厌自己无规律的作息、低下的效率。现在想来，浑浑噩噩度过的那一年中我最正确的决定，也许就是递交了转系申请书。</em></p><p>我的第二个大一即将过完，两相比较，大约能看的更清楚一些。</p><p>从高中到大学，我的第一反应是手忙脚乱：课程、科创、社工、无穷无尽的小组讨论和习题。也许忙起来之后就会忘记许多东西吧，比如烦恼、迷茫和曾经的梦想。我开始了解推研并不是80%就够，知道许多爆肝做的作品比不上大佬随手写的玩具。在一个众人推着我向前走的环境里，也许真的很难迈出改变的一步。我想我的大学四年也许就如此平凡地度过，在这之后推研或者推不了研，找个大厂或小厂，996到45岁。我想那时候的我善于接受命运的安排，比起风险更偏爱平稳。</p><h5 id="3-我的转系申请书"><a href="#3-我的转系申请书" class="headerlink" title="#3 我的转系申请书"></a>#3 我的转系申请书</h5><blockquote><p>“远离梦想的生活是微小的死亡”</p></blockquote><p>——一切都在电子电路与系统基础这门课程期中考试时戛然而止。我打心底里敬佩李国林老师，也试着去理解这门课，但是电路仍然令我生厌，并丢给了我一个34分的分数。大学以来的第一个不及格，虽然期末考好的话期中占比会降到10%，但那天晚上我仍然想了好久。</p><p>我想到在大一上学期末也曾考虑过转系，但是由于成绩处于边缘，这个念头迅速被我活跃的自我否定想法清除掉了。我想那时候我的保守来自我的自卑，我从来认为自己做不到这些事情，“避免丢脸和失望，不去做没有把握的事情”，为了避免失败而避免了开始。</p><p>我想到了北岛的诗，如#1和#2上所写；我想到了我似乎原来是想要入软院而非电子的，我捡起了积满尘土的做游戏的梦想，我意识到远离梦想的生活是微小的死亡。电子系的课程其实并不对我胃口，在电子行业的工作也将不会是我想要的未来。何不去搏一把？</p><p>转系申请开始前，大概一个半月两个月左右，我开始准备转系资料。电电期中考的失败是一个重要的契机，感谢glgg那年把题目出的很难。倘若我考的比较好的话，可能就会按照电子的培养方案一直读下去了。</p><h5 id="4-我和我自己和解"><a href="#4-我和我自己和解" class="headerlink" title="#4 我和我自己和解"></a>#4 我和我自己和解</h5><blockquote><p>“满天都是星星，好像一场冻结了的大雨。那时候我们一无所有，也没有什么能妨碍我们享受静夜。”</p></blockquote><p>提交材料、找导员签字、面试、焦躁不安的等待。这是我对去年五月份最后的记忆。</p><p>去年软院的申请人数出人意料地少，而我也成为了这一现象的受益者，如愿以偿的转入了软院。以下文段依然摘自我去年的生日总结：</p><p><em>面试没有想象中的那么难，选择从八降九更像是我与自己的和解：回想起之前那一年，之所以过得那么难受，也许正是因为高估了自己的能力、妄图把所有事情都做好，结果每个方面都归于平庸。重启大一，我有更多的时间去试错、去尝试原来高压生活下不敢触及的事。我明白我不能像大佬那样面面俱到，因此无需事事都与top人物攀比，如此大概、能过得轻松许多吧。</em><br><em>新的大一，虽然年纪比同班同学们大了不少，但我想我已经不再迷茫了，至少我找到了该努力的方向。社工也好、科创也好，虽然不知道自己能做到如何地步，但努力吧、努力吧。</em></p><p>我开始审视我从前的生活，审视我无意义的畏缩和逃避，开始意识到有些事情原来是可以触到的。转系也不是什么危险的事情，大学最多可以读六年，我有四次机会去试。既然如此，为什么还要接受命运塞给我的次优解呢？</p><p>我想，转系这件事带给我的最大价值并不在于可以换一套培养方案（虽然这个也很重要），而在于给我的生活提供了另一种可能，去抓住转瞬即逝的疯狂点子而不是思考成功的可能性。</p><p>我开始变得开朗，去主动结交好友、加入社团、尝试许多之前不敢试的事情。我想这是转系带给我的最珍贵的东西。</p><p>转系结束之后的那个学期，我把课程退到6分，来了一场说走就走的旅行。</p><h5 id="5-我的第二个大一和未来"><a href="#5-我的第二个大一和未来" class="headerlink" title="#5 我的第二个大一和未来"></a>#5 我的第二个大一和未来</h5><blockquote><p>“我早就决定吃想吃的东西，过短命的人生了。”</p></blockquote><p>第二个大一也即将画上句号，虽然这一年暂未有什么亮眼的成果，但我宛若新生。我已经可以笑着拥抱未来的一切，去和生活给我的安排讨价还价，去更多地考虑成功而非担心失败。</p><p>我开始理解，二十岁附近浪费些许时间其实并没有什么不妥。因为我们足够年轻，我们可以去尝试足够多的可能性。倘若能回到我第一个大一，我想对那时候的我说一句：“不必畏手畏脚，你还年轻，你有足够多的时间去试错。”</p><p>我想我已经有了足够的勇气，在追寻梦想的道路上大步前进了吧。</p><h5 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h5><p>我的转系自述</p><p>我的博客</p><p>我的胡思乱想和神志不清</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;随笔-降转这一年&quot;&gt;&lt;a href=&quot;#随笔-降转这一年&quot; class=&quot;headerlink&quot; title=&quot;随笔 | 降转这一年&quot;&gt;&lt;/a&gt;随笔 | 降转这一年&lt;/h3&gt;&lt;p&gt;&lt;code&gt;注：这篇文章充斥着大量神志不清、模糊、中二和鸡血，请慎重阅读。懒得插图了，就这样吧。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;又一年转系季。一觉醒来看到群中999+消息，我恍若回到了一年前握着文件夹踏入东主楼的那个下午——虽然那已经是一整年前的事情了。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="日记" scheme="http://www.sukidayo.top/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>206</title>
    <link href="http://www.sukidayo.top/2020/02/06/dairy0206/"/>
    <id>http://www.sukidayo.top/2020/02/06/dairy0206/</id>
    <published>2020-02-06T15:35:18.000Z</published>
    <updated>2020-02-06T15:37:28.754Z</updated>
    
    <content type="html"><![CDATA[<p>这是人们会说起的一年</p><p>这是人们会说起的一年，</p><p>这是人们说起就沉默的一年。</p><p>老人看着年轻人死去。</p><p>傻瓜看着聪明人死去。</p><p>大地不再生产，它吞噬。</p><p>天空不下雨，只下铁。</p><p>作者 / [德国] 布莱希特，1940</p><p>翻译 / 黄灿然</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这是人们会说起的一年&lt;/p&gt;
&lt;p&gt;这是人们会说起的一年，&lt;/p&gt;
&lt;p&gt;这是人们说起就沉默的一年。&lt;/p&gt;
&lt;p&gt;老人看着年轻人死去。&lt;/p&gt;
&lt;p&gt;傻瓜看着聪明人死去。&lt;/p&gt;
&lt;p&gt;大地不再生产，它吞噬。&lt;/p&gt;
&lt;p&gt;天空不下雨，只下铁。&lt;/p&gt;
&lt;p&gt;作者 / [
      
    
    </summary>
    
    
    
      <category term="日记" scheme="http://www.sukidayo.top/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>11/29 随手写</title>
    <link href="http://www.sukidayo.top/2019/11/29/dairy1129/"/>
    <id>http://www.sukidayo.top/2019/11/29/dairy1129/</id>
    <published>2019-11-29T10:58:31.000Z</published>
    <updated>2020-06-29T14:40:01.027Z</updated>
    
    <content type="html"><![CDATA[<p>难得，竟然在周五就把一周的所有任务都清理掉了。</p><span id="more"></span><p>这周里开不完的会、做不完的外联和访谈、小组pre、一周速成Kotlin和JavaScript，一项项都不容易但终于把压在一起的任务一点点清理掉了，甚至忙中偷空建立起了博客。好久没有空出一个完全自由的周末了，雪降下的时刻在对话框敲出“下雪了”三个字，心情也轻快起来。</p><p>计划早起拍一点雪景、把挂画布布置到寝室、买一束花、周日懒懒地睡到中午、把读到一半的天气之子看完。 </p><p><img src="/2019/11/29/dairy1129/1.jpg" alt="1"></p><p><img src="/2019/11/29/dairy1129/2.jpg" alt="2"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;难得，竟然在周五就把一周的所有任务都清理掉了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="日记" scheme="http://www.sukidayo.top/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>11/26 随手写</title>
    <link href="http://www.sukidayo.top/2019/11/26/dairy1126/"/>
    <id>http://www.sukidayo.top/2019/11/26/dairy1126/</id>
    <published>2019-11-26T14:20:00.000Z</published>
    <updated>2019-12-01T11:00:12.545Z</updated>
    
    <content type="html"><![CDATA[<p>想起去年疯狂给公众号写稿子的日子。也许公众号始终是太「公众」了，许多本来应该洒下的话却羞于启齿。不如现在这样，在互联网的一角建一个不会被搜索引擎收录的博客，想到什么就写点什么，心情不好也可以无限期地搁在一边。</p><span id="more"></span><p>给家里打了电话。晚上桃李的炒饭有些凉了；宿舍桌子下的猕猴桃软得刚刚好；又一次在科协的周会上走神；突然打算做出一些改变，从明早开始吧；北京今天天气不错；晚安。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;想起去年疯狂给公众号写稿子的日子。也许公众号始终是太「公众」了，许多本来应该洒下的话却羞于启齿。不如现在这样，在互联网的一角建一个不会被搜索引擎收录的博客，想到什么就写点什么，心情不好也可以无限期地搁在一边。&lt;/p&gt;
    
    </summary>
    
    
      <category term="日记" scheme="http://www.sukidayo.top/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>11/23 随手写：记我的第一和第二个大一</title>
    <link href="http://www.sukidayo.top/2019/11/23/dairy1123/"/>
    <id>http://www.sukidayo.top/2019/11/23/dairy1123/</id>
    <published>2019-11-22T16:00:00.000Z</published>
    <updated>2019-12-01T11:00:04.448Z</updated>
    
    <content type="html"><![CDATA[<p>这些文字早在暑假就该被写好的，然而像网络学堂的作业一样被我推而又推。恰今晚有闲，索性把还能记起的片段写下来，记录我度过了的和正在度过的大学一年级。</p><span id="more"></span><p>我不愿把我的第一个大一定义成「失败」的，但回想起来，除了与室友好友相处的短暂美好时光，三百余日的经历中竟一时难以找出可称为「闪光」的节点。我讨厌运算放大器、讨厌反射系数和动态电路、讨厌二学位申请记录里「未通过」三个字、也讨厌自己无规律的作息、低下的效率。现在想来，浑浑噩噩度过的那一年中我最正确的决定，也许就是递交了转系申请书。<br>面试没有想象中的那么难，选择从八降九更像是我与自己的和解：回想起之前那一年，之所以过得那么难受，也许正是因为高估了自己的能力、妄图把所有事情都做好，结果每个方面都归于平庸。重启大一，我有更多的时间去试错、去尝试原来高压生活下不敢触及的事。我明白我不能像大佬那样面面俱到，因此无需事事都与top人物攀比，如此大概、能过得轻松许多吧。<br>新的大一，虽然年纪比同班同学们大了不少，但我想我已经不再迷茫了，至少我找到了该努力的方向。社工也好、科创也好，虽然不知道自己能做到如何地步，但努力吧、努力吧。<br>也希望列表各位诸事顺遂、学业有成。<br>今晚计划吃火锅，也许会开始的很晚，想一起吃锅的可以联系我。 </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这些文字早在暑假就该被写好的，然而像网络学堂的作业一样被我推而又推。恰今晚有闲，索性把还能记起的片段写下来，记录我度过了的和正在度过的大学一年级。&lt;/p&gt;
    
    </summary>
    
    
      <category term="日记" scheme="http://www.sukidayo.top/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>施工中...</title>
    <link href="http://www.sukidayo.top/2019/11/21/index/"/>
    <id>http://www.sukidayo.top/2019/11/21/index/</id>
    <published>2019-11-20T16:00:00.000Z</published>
    <updated>2019-11-26T14:32:46.636Z</updated>
    
    <content type="html"><![CDATA[<p>闲来无事建了个小站，偶尔往里面写点乱七八糟的东西；也许会记录一下做过的项目、或者单纯写点日记和游记；域名正便宜，服务器暂且挂在GitHub上。一时半会可能做不出留言评论功能，有事还是要靠微信QQ交流。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;闲来无事建了个小站，偶尔往里面写点乱七八糟的东西；也许会记录一下做过的项目、或者单纯写点日记和游记；域名正便宜，服务器暂且挂在GitHub上。一时半会可能做不出留言评论功能，有事还是要靠微信QQ交流。&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
</feed>
